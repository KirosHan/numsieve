<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CefSharp</name>
    </assembly>
    <members>
        <member name="T:CefSharp.CefExtension">
            <summary>
            Represents a new V8 extension to be registered.
            </summary>
        </member>
        <member name="M:CefSharp.CefExtension.#ctor(System.String,System.String)">
            <summary>
            Creates a new CwefExtension instance with a given name.
            </summary>
            <param name="name">Name of the CefExtension</param>
            <param name="javascriptCode">The javascript extension code.</param>
        </member>
        <member name="P:CefSharp.CefExtension.Name">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="P:CefSharp.CefExtension.JavascriptCode">
            <summary>
            Gets the javascript extension code
            </summary>
        </member>
        <member name="T:CefSharp.CefFileDialogMode">
            <summary>
            CefFileDialogMode (Based on cef_file_dialog_mode_t)
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.Open">
            <summary>
            Requires that the file exists before allowing the user to pick it.
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.OpenMultiple">
            <summary>
            Like Open, but allows picking multiple files to open.
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.OpenFolder">
            <summary>
            Like Open, but selects a folder to open.
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.Save">
            <summary>
            Allows picking a nonexistent file, and prompts to overwrite if the file already exists.
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.TypeMask">
            <summary>
            General mask defining the bits used for the type values.
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.OverwritePrompt">
            <summary>
            Prompt to overwrite if the user selects an existing file with the Save dialog.
            </summary>
        </member>
        <member name="F:CefSharp.CefFileDialogMode.HideReadOnly">
            <summary>
            Do not display read-only files.
            </summary>
        </member>
        <member name="T:CefSharp.CefGeoPositionErrorCode">
            <summary>
            Geoposition error codes. 
            </summary>
        </member>
        <member name="T:CefSharp.CefJsDialogType">
            <summary>
            Supported JavaScript dialog types.
            </summary>
        </member>
        <member name="F:CefSharp.CefMenuCommand.CustomFirst">
            <summary>
            Custom menu items originating from the renderer process. For example, plugin placeholder menu items or Flash menu items.
            This is the first entry
            </summary>
        </member>
        <member name="F:CefSharp.CefMenuCommand.CustomLast">
            <summary>
            Custom menu items originating from the renderer process. For example, plugin placeholder menu items or Flash menu items.
            This is the last entry
            </summary>
        </member>
        <member name="T:CefSharp.CefPdfPrintMarginType">
            <summary>
            Margin type for PDF printing.
            </summary>
        </member>
        <member name="F:CefSharp.CefPdfPrintMarginType.Default">
            <summary>
            Default margins.
            </summary>
        </member>
        <member name="F:CefSharp.CefPdfPrintMarginType.None">
            <summary>
            No margins.
            </summary>
        </member>
        <member name="F:CefSharp.CefPdfPrintMarginType.Minimum">
            <summary>
            Minimum margins
            </summary>
        </member>
        <member name="F:CefSharp.CefPdfPrintMarginType.Custom">
            <summary>
            Custom margins.
            </summary>
        </member>
        <member name="T:CefSharp.ContextMenuEditState">
            <summary>
            Supported context menu edit state bit flags.
            </summary>
        </member>
        <member name="T:CefSharp.ContextMenuMediaState">
            <summary>
            Supported context menu media state bit flags.
            </summary>
        </member>
        <member name="T:CefSharp.ContextMenuMediaType">
            <summary>
            Supported context menu media types.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuMediaType.None">
            <summary>
            No special node is in context.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuMediaType.Image">
            <summary>
            An image node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuMediaType.Video">
            <summary>
            A video node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuMediaType.Audio">
            <summary>
            An audio node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuMediaType.File">
            <summary>
            A file node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuMediaType.Plugin">
            <summary>
            A plugin node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.None">
            <summary>
            No node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.Page">
            <summary>
            The top page is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.Frame">
            <summary>
            A subframe page is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.Link">
            <summary>
            A link is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.Media">
            <summary>
            A media node is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.Selection">
            <summary>
            There is a textual or mixed selection that is selected.
            </summary>
        </member>
        <member name="F:CefSharp.ContextMenuType.Editable">
            <summary>
            An editable element is selected.
            </summary>
        </member>
        <member name="T:CefSharp.DomNode">
            <summary>
            Represents a node in the browser's DOM.
            </summary>
        </member>
        <member name="T:CefSharp.IDomNode">
            <summary>
            Represents the tag name and attribute data belonging to a node in the
            browser's DOM.
            </summary>
        </member>
        <member name="M:CefSharp.IDomNode.HasAttribute(System.String)">
            <summary>
            Determine if the DomNode has the requested attribute.
            </summary>
            <param name="attributeName">
            The name of the attribute value.
            </param>
            <returns>
            True if the attribute exists in the DomNode, false if it does not.
            </returns>
        </member>
        <member name="P:CefSharp.IDomNode.Item(System.String)">
            <summary>
            Get the value of an attribute.
            </summary>
            <param name="attributeName">
            The name of the attribute value to get.
            </param>
            <returns>
            The attribute value if the name exists in the DomNode's attributes.
            Null if the name does not exist.
            </returns>
        </member>
        <member name="P:CefSharp.IDomNode.TagName">
            <summary>
            The name of the HTML element.
            </summary>
        </member>
        <member name="P:CefSharp.IDomNode.AttributeNames">
            <summary>
            Get a read only list of the attribute names.
            </summary>
        </member>
        <member name="T:CefSharp.DraggableRegion">
            <summary>
            Representing a draggable region.
            </summary>
        </member>
        <member name="T:CefSharp.FilterStatus">
            <summary>
            Return values for IResponseFilter
            </summary>
        </member>
        <member name="F:CefSharp.FilterStatus.NeedMoreData">
            <summary>
            Some or all of the pre-filter data was read successfully but more data is
            needed in order to continue filtering (filtered output is pending).
            </summary>
        </member>
        <member name="F:CefSharp.FilterStatus.Done">
            <summary>
            Some or all of the pre-filter data was read successfully and all available filtered output has been written.
            </summary>
        </member>
        <member name="F:CefSharp.FilterStatus.Error">
            <summary>
            An error occurred during filtering.
            </summary>
        </member>
        <member name="T:CefSharp.Geoposition">
            <summary>
            Structure representing geoposition information. The properties of this
            structure correspond to those of the JavaScript Position object although
            their types may differ.
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.Latitude">
            <summary>
            Latitude in decimal degrees north (WGS84 coordinate frame).
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.Longitude">
            <summary>
            Longitude in decimal degrees west (WGS84 coordinate frame).
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.Altitude">
            <summary>
            Altitude in meters (above WGS84 datum).
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.AltitudeAccuracy">
            <summary>
            Accuracy of altitude in meters.
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.Heading">
            <summary>
            Heading in decimal degrees clockwise from true north.
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.Speed">
            <summary>
            Horizontal component of device velocity in meters per second.
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.Timestamp">
            <summary>
            Time of position measurement in miliseconds since Epoch in UTC time. This
            is taken from the host computer's system clock.
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.ErrorCode">
            <summary>
            Error code, see enum above.
            </summary>
        </member>
        <member name="P:CefSharp.Geoposition.ErrorMessage">
            <summary>
            Human-readable error message.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.DefaultEncoding">
            <summary>
            Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
            configurable using the "default-encoding" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.RemoteFonts">
            <summary>
            Controls the loading of fonts from remote sources. Also configurable using
            the "disable-remote-fonts" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.Javascript">
            <summary>
            Controls whether JavaScript can be executed.
            (Disable javascript)
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.JavascriptOpenWindows">
            <summary>
            Controls whether JavaScript can be used for opening windows. Also
            configurable using the "disable-javascript-open-windows" command-line
            switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.JavascriptCloseWindows">
            <summary>
            Controls whether JavaScript can be used to close windows that were not
            opened via JavaScript. JavaScript can still be used to close windows that
            were opened via JavaScript. Also configurable using the
            "disable-javascript-close-windows" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.JavascriptAccessClipboard">
            <summary>
            Controls whether JavaScript can access the clipboard. Also configurable
            using the "disable-javascript-access-clipboard" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.JavascriptDomPaste">
            <summary>
            Controls whether DOM pasting is supported in the editor via
            execCommand("paste"). The |javascript_access_clipboard| setting must also
            be enabled. Also configurable using the "disable-javascript-dom-paste"
            command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.CaretBrowsing">
            <summary>
            Controls whether the caret position will be drawn. Also configurable using
            the "enable-caret-browsing" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.Plugins">
            <summary>
            Controls whether any plugins will be loaded. Also configurable using the
            "disable-plugins" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.UniversalAccessFromFileUrls">
            <summary>
            Controls whether file URLs will have access to all URLs. Also configurable
            using the "allow-universal-access-from-files" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.FileAccessFromFileUrls">
            <summary>
            Controls whether file URLs will have access to other file URLs. Also
            configurable using the "allow-access-from-files" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.WebSecurity">
            <summary>
            Controls whether web security restrictions (same-origin policy) will be
            enforced. Disabling this setting is not recommend as it will allow risky
            security behavior such as cross-site scripting (XSS). Also configurable
            using the "disable-web-security" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.ImageLoading">
            <summary>
            Controls whether image URLs will be loaded from the network. A cached image
            will still be rendered if requested. Also configurable using the
            "disable-image-loading" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.ImageShrinkStandaloneToFit">
            <summary>
            Controls whether standalone images will be shrunk to fit the page. Also
            configurable using the "image-shrink-standalone-to-fit" command-line
            switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.TextAreaResize">
            <summary>
            Controls whether text areas can be resized. Also configurable using the
            "disable-text-area-resize" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.TabToLinks">
            <summary>
            Controls whether the tab key can advance focus to links. Also configurable
            using the "disable-tab-to-links" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.LocalStorage">
            <summary>
            Controls whether local storage can be used. Also configurable using the
            "disable-local-storage" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.Databases">
            <summary>
            Controls whether databases can be used. Also configurable using the
            "disable-databases" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.ApplicationCache">
            <summary>
            Controls whether the application cache can be used. Also configurable using
            the "disable-application-cache" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.WebGl">
            <summary>
            Controls whether WebGL can be used. Note that WebGL requires hardware
            support and may not work on all systems even when enabled. Also
            configurable using the "disable-webgl" command-line switch.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.BackgroundColor">
            <summary>
            Opaque background color used for the browser before a document is loaded
            and when no document color is specified. By default the background color
            will be the same as CefSettings.background_color. Only the RGB compontents
            of the specified value will be used. The alpha component must greater than
            0 to enable use of the background color but will be otherwise ignored.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.AcceptLanguageList">
            <summary>
            Comma delimited ordered list of language codes without any whitespace that
            will be used in the "Accept-Language" HTTP header. May be overridden on a
            per-browser basis using the CefBrowserSettings.AcceptLanguageList value.
            If both values are empty then "en-US,en" will be used. Can be overridden
            for individual RequestContext instances via the
            RequestContextSettings.AcceptLanguageList value.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserSettings.WindowlessFrameRate">
            <summary>
            The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
            will be called for a windowless browser. The actual fps may be lower if
            the browser cannot generate frames at the requested rate. The minimum
            value is 1 and the maximum value is 60 (default 30). This value can also be
            changed dynamically via IBrowserHost.SetWindowlessFrameRate.
            </summary>
        </member>
        <member name="T:CefSharp.IFindHandler">
            <summary>
            Implement this interface to handle events related to find results.
            The methods of this class will be called on the CEF UI thread.
            </summary>
        </member>
        <member name="M:CefSharp.IFindHandler.OnFindResult(CefSharp.IWebBrowser,CefSharp.IBrowser,System.Int32,System.Int32,CefSharp.Rect,System.Int32,System.Boolean)">
            <summary>
            Called to report find results returned by <see cref="M:CefSharp.IBrowserHost.Find(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
            <param name="identifier">is the identifier passed to Find()</param>
            <param name="count">is the number of matches currently identified</param>
            <param name="selectionRect">is the location of where the match was found (in window coordinates)</param>
            <param name="activeMatchOrdinal">is the current position in the search results</param>
            <param name="finalUpdate">is true if this is the last find notification.</param>
        </member>
        <member name="T:CefSharp.Internals.CommandLineArgsParser">
            <summary>
            Simple helper class used for checking/parsing command line arguments
            </summary>
        </member>
        <member name="M:CefSharp.IPluginHandler.OnBeforePluginLoad(System.String,System.String,System.String,CefSharp.WebPluginInfo,CefSharp.PluginPolicy@)">
            <summary>
            Called on the browser process IO thread before a plugin instance is loaded.
            The default plugin policy can be set at runtime using the `--plugin-policy=[allow|detect|block]` command-line flag.
            </summary>
            <param name="mimeType">is the mime type of the plugin that will be loaded</param>
            <param name="url">is the content URL that the plugin will load and may be empty</param>
            <param name="topOriginUrl">is the URL for the top-level frame that contains the plugin</param>
            <param name="info">includes additional information about the plugin that will be loaded</param>
            <param name="pluginPolicy">Modify and return true to change the policy.</param>
            <returns>Return false to use the recommended policy. Modify and return true to change the policy.</returns>
        </member>
        <member name="T:CefSharp.IRenderProcessMessageHandler">
            <summary>
            Messages sent by the render process can be handled by implementing this
            interface.
            </summary>
        </member>
        <member name="M:CefSharp.IRenderProcessMessageHandler.OnContextCreated(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame)">
            <summary>
            OnContextCreated is called in the Render process immediately after a CefV8Context is created.
            An IPC message is immediately sent to notify the context has been created
            (should be safe to execute javascript). If the page has no javascript then on context will be created
            and as a result this method will not be called. Currently only called for the Main frame <see cref="P:CefSharp.IFrame.IsMain"/>
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:CefSharp.IRenderProcessMessageHandler.OnFocusedNodeChanged(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IDomNode)">
            <summary>
            Invoked when an element in the UI gains focus (or possibly no
            element gains focus; i.e. an element lost focus).
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame object</param>
            <param name="node">An object with information about the node (if any) that has focus.</param>
        </member>
        <member name="M:CefSharp.IRequestContext.IsSame(CefSharp.IRequestContext)">
            <summary>
            Returns true if this object is pointing to the same context object.
            </summary>
            <param name="context">context to compare</param>
            <returns>Returns true if the same</returns>
        </member>
        <member name="M:CefSharp.IRequestContext.IsSharingWith(CefSharp.IRequestContext)">
            <summary>
            Returns true if this object is sharing the same storage as the specified context.
            </summary>
            <param name="context">context to compare</param>
            <returns>Returns true if same storage</returns>
        </member>
        <member name="M:CefSharp.IRequestContext.GetDefaultCookieManager(CefSharp.ICompletionCallback)">
            <summary>
            Returns the default cookie manager for this object. This will be the global
            cookie manager if this object is the global request context. Otherwise,
            this will be the default cookie manager used when this request context does
            not receive a value via IRequestContextHandler.GetCookieManager(). 
            </summary>
            <param name="callback">If callback is non-NULL it will be executed asnychronously on the CEF IO thread
            after the manager's storage has been initialized.</param>
            <returns>Returns the default cookie manager for this object</returns>
        </member>
        <member name="M:CefSharp.IRequestContext.RegisterSchemeHandlerFactory(System.String,System.String,CefSharp.ISchemeHandlerFactory)">
            <summary>
            Register a scheme handler factory for the specified schemeName and optional domainName.
            An empty domainName value for a standard scheme will cause the factory to match all domain
            names. The domainName value will be ignored for non-standard schemes. If schemeName is
            a built-in scheme and no handler is returned by factory then the built-in scheme handler
            factory will be called. If schemeName is a custom scheme then you must also implement the
            CefApp::OnRegisterCustomSchemes() method in all processes. This function may be called multiple
            times to change or remove the factory that matches the specified schemeName and optional
            domainName.
            </summary>
            <param name="schemeName">Scheme Name</param>
            <param name="domainName">Optional domain name</param>
            <param name="factory">Scheme handler factory</param>
            <returns>Returns false if an error occurs.</returns>
        </member>
        <member name="M:CefSharp.IRequestContext.ClearSchemeHandlerFactories">
            <summary>
            Clear all registered scheme handler factories. 
            </summary>
            <returns>Returns false on error.</returns>
        </member>
        <member name="M:CefSharp.IRequestContext.PurgePluginListCache(System.Boolean)">
            <summary>
            Tells all renderer processes associated with this context to throw away
            their plugin list cache. If reloadPages is true they will also reload
            all pages with plugins. RequestContextHandler.OnBeforePluginLoad may
            be called to rebuild the plugin list cache.
            </summary>
            <param name="reloadPages">reload any pages with pluginst</param>
        </member>
        <member name="M:CefSharp.IRequestContext.HasPreference(System.String)">
            <summary>
            Returns true if a preference with the specified name exists. This method
            must be called on the CEF UI thread.
            </summary>
            <param name="name">name of preference</param>
            <returns>bool if the preference exists</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
            Cef.OnContextInitialized and ChromiumWebBrowser.IsBrowserInitializedChanged are both
            executed on the CEF UI thread, so can be called directly.
            When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
            application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.IRequestContext.GetPreference(System.String)">
            <summary>
            Returns the value for the preference with the specified name. Returns
            NULL if the preference does not exist. The returned object contains a copy
            of the underlying preference value and modifications to the returned object
            will not modify the underlying preference value. This method must be called
            on the CEF UI thread.
            </summary>
            <param name="name">preference name</param>
            <returns>Returns the value for the preference with the specified name</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
            Cef.OnContextInitialized and ChromiumWebBrowser.IsBrowserInitializedChanged are both
            executed on the CEF UI thread, so can be called directly.
            When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
            application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.IRequestContext.GetAllPreferences(System.Boolean)">
            <summary>
            Returns all preferences as a dictionary. The returned
            object contains a copy of the underlying preference values and
            modifications to the returned object will not modify the underlying
            preference values. This method must be called on the browser process UI
            thread.
            </summary>
            <param name="includeDefaults">If true then
            preferences currently at their default value will be included.</param>
            <returns>Preferences (dictionary can have sub dictionaries)</returns>
        </member>
        <member name="M:CefSharp.IRequestContext.CanSetPreference(System.String)">
            <summary>
            Returns true if the preference with the specified name can be modified
            using SetPreference. As one example preferences set via the command-line
            usually cannot be modified. This method must be called on the CEF UI thread.
            </summary>
            <param name="name">preference key</param>
            <returns>Returns true if the preference with the specified name can be modified
            using SetPreference</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
            Cef.OnContextInitialized and ChromiumWebBrowser.IsBrowserInitializedChanged are both
            executed on the CEF UI thread, so can be called directly.
            When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
            application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.IRequestContext.SetPreference(System.String,System.Object,System.String@)">
            <summary>
            Set the value associated with preference name. If value is null the
            preference will be restored to its default value. If setting the preference
            fails then error will be populated with a detailed description of the
            problem. This method must be called on the CEF UI thread.
            Preferences set via the command-line usually cannot be modified.
            </summary>
            <param name="name">preference key</param>
            <param name="value">preference value</param>
            <param name="error">out error</param>
            <returns>Returns true if the value is set successfully and false otherwise.</returns>
            /// <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
            Cef.OnContextInitialized and ChromiumWebBrowser.IsBrowserInitializedChanged are both
            executed on the CEF UI thread, so can be called directly.
            When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
            application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.IRequestContext.ClearCertificateExceptions(CefSharp.ICompletionCallback)">
            <summary>
            Clears all certificate exceptions that were added as part of handling
            <see cref="M:CefSharp.IRequestHandler.OnCertificateError(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.CefErrorCode,System.String,CefSharp.ISslInfo,CefSharp.IRequestCallback)"/>. If you call this it is
            recommended that you also call <see cref="M:CefSharp.IRequestContext.CloseAllConnections(CefSharp.ICompletionCallback)"/> or you risk not
            being prompted again for server certificates if you reconnect quickly.
            </summary>
            <param name="callback">If is non-NULL it will be executed on the CEF UI thread after
            completion. This param is optional</param>
        </member>
        <member name="M:CefSharp.IRequestContext.CloseAllConnections(CefSharp.ICompletionCallback)">
            <summary>
            Clears all active and idle connections that Chromium currently has.
            This is only recommended if you have released all other CEF objects but
            don't yet want to call Cef.Shutdown().
            </summary>
            <param name="callback">If is non-NULL it will be executed on the CEF UI thread after
            completion. This param is optional</param>
        </member>
        <member name="M:CefSharp.IRequestContext.ResolveHostAsync(System.Uri)">
            <summary>
            Attempts to resolve origin to a list of associated IP addresses.
            </summary>
            <param name="origin">host name to resolve</param>
            <return>A task that represents the Resoolve Host operation. The value of the TResult parameter contains ResolveCallbackResult.</return>
        </member>
        <member name="M:CefSharp.IRequestContext.ResolveHostCached(System.Uri,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Attempts to resolve origin to a list of associated IP addresses using
            cached data. This method must be called on the CEF IO thread. Use
            Cef.IOThreadTaskFactory to execute on that thread.
            </summary>
            <param name="origin">host name to resolve</param>
            <param name="resolvedIpAddresses">list of resolved IP
            addresses or empty list if no cached data is available.</param>
            <returns> Returns <see cref="F:CefSharp.CefErrorCode.None"/> on success</returns>
        </member>
        <member name="P:CefSharp.IRequestContext.IsGlobal">
            <summary>
            Returns true if this object is the global context. The global context is
            used by default when creating a browser or URL request with a NULL context
            argument.
            </summary>
        </member>
        <member name="P:CefSharp.IRequestContext.CachePath">
            <summary>
            Returns the cache path for this object. If empty an "incognito mode"
            in-memory cache is being used.
            </summary>
        </member>
        <member name="M:CefSharp.IResolveCallback.OnResolveCompleted(CefSharp.CefErrorCode,System.Collections.Generic.IList{System.String})">
            <summary>
            Called after the ResolveHost request has completed.
            </summary>
            <param name="result">The result code</param>
            <param name="resolvedIpAddresses">will be the list of resolved IP addresses or
            empty if the resolution failed.</param>
        </member>
        <member name="M:CefSharp.IResponseFilter.InitFilter">
            <summary>
            Initialize the response filter. Will only be called a single time.
            The filter will not be installed if this method returns false.
            </summary>
            <returns>The filter will not be installed if this method returns false.</returns>
        </member>
        <member name="M:CefSharp.IResponseFilter.Filter(System.IO.Stream,System.Int64@,System.IO.Stream,System.Int64@)">
            <summary>
            Called to filter a chunk of data.
            This method will be called repeatedly until there is no more data to filter (resource response is complete),
            dataInRead matches dataIn.Length (all available pre-filter bytes have been read), and the method
            returns FilterStatus.Done or FilterStatus.Error.
            </summary>
            <param name="dataIn">is a Stream wrapping the underlying input buffer containing pre-filter data. Can be null.</param>
            <param name="dataInRead">Set to the number of bytes that were read from dataIn</param>
            <param name="dataOut">is a Stream wrapping the underlying output buffer that can accept filtered output data.
            Check dataOut.Length for maximum buffer size</param>
            <param name="dataOutWritten">Set to the number of bytes that were written into dataOut</param>
            <returns>If some or all of the pre-filter data was read successfully but more data is needed in order
            to continue filtering (filtered output is pending) return FilterStatus.NeedMoreData. If some or all of the pre-filter
            data was read successfully and all available filtered output has been written return FilterStatus.Done. If an error
            occurs during filtering return FilterStatus.Error. </returns>
            <remarks>Do not keep a reference to the buffers(Steams) passed to this method.</remarks>
        </member>
        <member name="M:CefSharp.IRunContextMenuCallback.Continue(CefSharp.CefMenuCommand,CefSharp.CefEventFlags)">
            <summary>
            Complete context menu display by selecting the specified commandId and eventFlags;
            </summary>
            <param name="commandId">the command Id</param>
            <param name="eventFlags">the event flags</param>
        </member>
        <member name="M:CefSharp.IRunContextMenuCallback.Cancel">
            <summary>
            Cancel context menu display.
            </summary>
        </member>
        <member name="P:CefSharp.IRunContextMenuCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.PdfPrintSettings">
            <summary>
            Print to Pdf Settings
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.HeaderFooterTitle">
            <summary>
            Page title to display in the header. Only used if <see cref="P:CefSharp.PdfPrintSettings.HeaderFooterEnabled"/>
            is set to true.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.HeaderFooterUrl">
            <summary>
            URL to display in the footer. Only used if <see cref="P:CefSharp.PdfPrintSettings.HeaderFooterEnabled"/> is set
            to true.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.PageWidth">
            <summary>
            Output page size in microns. If either of these values is less than or
            equal to zero then the default paper size (A4) will be used.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.PageHeight">
            <summary>
            Output page size in microns. If either of these values is less than or
            equal to zero then the default paper size (A4) will be used.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.MarginLeft">
            <summary>
            Margin in millimeters. Only used if MarginType is set to Custom.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.MarginTop">
            <summary>
            Margin in millimeters. Only used if MarginType is set to Custom.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.MarginRight">
            <summary>
            Margin in millimeters. Only used if MarginType is set to Custom.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.MarginBottom">
            <summary>
            Margin in millimeters. Only used if MarginType is set to Custom.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.MarginType">
            <summary>
            Margin type.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.HeaderFooterEnabled">
            <summary>
            Set to true to print headers and footers or false to not print
            headers and footers.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.SelectionOnly">
            <summary>
            Set to true to print the selection only or false to print all.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.Landscape">
            <summary>
            Set to true for landscape mode or false for portrait mode.
            </summary>
        </member>
        <member name="P:CefSharp.PdfPrintSettings.BackgroundsEnabled">
            <summary>
            Set to true to print background graphics or false to not print
            background graphics.
            </summary>
        </member>
        <member name="T:CefSharp.ICookieManager">
            <summary>
            Used for managing cookies. The methods may be called on any thread unless otherwise indicated.
            </summary>
        </member>
        <member name="M:CefSharp.ICookieManager.DeleteCookiesAsync(System.String,System.String)">
            <summary>
            Deletes all cookies that matches all the provided parameters asynchronously. If both <paramref name="url"/> and <paramref name="name"/> are empty, all cookies will be deleted.
            </summary>
            <param name="url">The cookie URL. If an empty string is provided, any URL will be matched.</param>
            <param name="name">The name of the cookie. If an empty string is provided, any URL will be matched.</param>
            <return>A task that represents the delete operation. The value of the TResult parameter contains false if a non-empty invalid URL is specified, or if cookies cannot be accessed; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.ICookieManager.SetCookieAsync(System.String,CefSharp.Cookie)">
            <summary>
            Sets a cookie given a valid URL and explicit user-provided cookie attributes. This function expects each attribute to be well-formed. It will check for disallowed
            characters (e.g. the ';' character is disallowed within the cookie value attribute) and will return false without setting
            the cookie if such characters are found.
            </summary>
            <param name="url">The cookie URL</param>
            <param name="cookie">The cookie</param>
            <return>A task that represents the cookie set operation. The value of the TResult parameter contains false if the cookie cannot be set (e.g. if illegal charecters such as ';' are used); otherwise true.</return>
        </member>
        <member name="M:CefSharp.ICookieManager.SetStoragePath(System.String,System.Boolean)">
            <summary>
            Sets the directory path that will be used for storing cookie data. If <paramref name="path"/> is empty data will be stored in 
            memory only. Otherwise, data will be stored at the specified path. To persist session cookies (cookies without an expiry 
            date or validity interval) set <paramref name="persistSessionCookies"/> to true. Session cookies are generally intended to be transient and 
            most Web browsers do not persist them.
            </summary>
            <param name="path">The file path to write cookies to.</param>
            <param name="persistSessionCookies">A flag that determines whether session cookies will be persisted or not.</param>
            <return> false if a non-empty invalid URL is specified; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.ICookieManager.SetSupportedSchemes(System.String[])">
            <summary>
            Set the schemes supported by this manager. By default only "http" and "https" schemes are supported. Must be called before any cookies are accessed.
            </summary>
            <param name="schemes">The list of supported schemes.</param>
        </member>
        <member name="M:CefSharp.ICookieManager.VisitAllCookies(CefSharp.ICookieVisitor)">
            <summary>
            Visits all cookies using the provided Cookie Visitor. The returned cookies are sorted by longest path, then by earliest creation date.
            </summary>
            <param name="visitor">A user-provided Cookie Visitor implementation.</param>
            <return>Returns false if cookies cannot be accessed; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.ICookieManager.VisitUrlCookies(System.String,System.Boolean,CefSharp.ICookieVisitor)">
            <summary>
            Visits a subset of the cookies. The results are filtered by the given url scheme, host, domain and path. 
            If <paramref name="includeHttpOnly"/> is true, HTTP-only cookies will also be included in the results. The returned cookies 
            are sorted by longest path, then by earliest creation date.
            </summary>
            <param name="url">The URL to use for filtering a subset of the cookies available.</param>
            <param name="includeHttpOnly">A flag that determines whether HTTP-only cookies will be shown in results.</param>
            <param name="visitor">A user-provided Cookie Visitor implementation.</param>
            <return>Returns false if cookies cannot be accessed; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.ICookieManager.FlushStoreAsync">
            <summary>
            Flush the backing store (if any) to disk
            </summary>
            <return>A task that represents the Flush operation. The value of the TResult parameter contains false if cookies cannot be accessed; otherwise, true.</return>
        </member>
        <member name="T:CefSharp.ILoadHandler">
            <summary>
            Implement this interface to handle events related to browser load status.
            The methods of this interface will be called on the CEF UI thread. Blocking in these methods
            will likely cause your UI to become unresponsive and/or hang.
            </summary>
        </member>
        <member name="M:CefSharp.ILoadHandler.OnLoadingStateChange(CefSharp.IWebBrowser,CefSharp.LoadingStateChangedEventArgs)">
            <summary>
            Called when the loading state has changed. This callback will be executed twice
            once when loading is initiated either programmatically or by user action,
            and once when loading is terminated due to completion, cancellation of failure.
            This method will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="loadingStateChangedArgs">args</param>
        </member>
        <member name="M:CefSharp.ILoadHandler.OnFrameLoadStart(CefSharp.IWebBrowser,CefSharp.FrameLoadStartEventArgs)">
            <summary>
            Called when the browser begins loading a frame.
            The <see cref="P:CefSharp.FrameLoadEndEventArgs.Frame"/> value will never be empty
            Check the <see cref="P:CefSharp.IFrame.IsMain"/> method to see if this frame is the main frame.
            Multiple frames may be loading at the same time. Sub-frames may start or continue loading after the main frame load has ended.
            This method may not be called for a particular frame if the load request for that frame fails.
            For notification of overall browser load status use <see cref="M:CefSharp.ILoadHandler.OnLoadingStateChange(CefSharp.IWebBrowser,CefSharp.LoadingStateChangedEventArgs)"/> instead. 
            This method will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="frameLoadStartArgs">args</param>
        </member>
        <member name="M:CefSharp.ILoadHandler.OnFrameLoadEnd(CefSharp.IWebBrowser,CefSharp.FrameLoadEndEventArgs)">
            <summary>
            Called when the browser is done loading a frame.
            The <see cref="P:CefSharp.FrameLoadEndEventArgs.Frame"/> value will never be empty
            Check the <see cref="P:CefSharp.IFrame.IsMain"/> method to see if this frame is the main frame.
            Multiple frames may be loading at the same time. Sub-frames may start or continue loading after the main frame load has ended.
            This method will always be called for all frames irrespective of whether the request completes successfully. 
            This method will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="frameLoadEndArgs">args</param>
        </member>
        <member name="M:CefSharp.ILoadHandler.OnLoadError(CefSharp.IWebBrowser,CefSharp.LoadErrorEventArgs)">
            <summary>
            Called when the resource load for a navigation fails or is canceled.
            <see cref="P:CefSharp.LoadErrorEventArgs.ErrorCode"/> is the error code number, <see cref="P:CefSharp.LoadErrorEventArgs.ErrorText"/> is the error text and
            <see cref="P:CefSharp.LoadErrorEventArgs.FailedUrl"/> is the URL that failed to load. See net\base\net_error_list.h
            for complete descriptions of the error codes.
            This method will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="loadErrorArgs">args</param>
        </member>
        <member name="M:CefSharp.IMenuModel.Clear">
            <summary>
            Remove all menu items. Can be used to disable the context menu. Returns true on success.
            </summary>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetLabelAt(System.Int32)">
            <summary>
            Returns the label at the specified index or empty if not found due to
            invalid range or the index being a separator.
            </summary>
            <param name="index">specified index</param>
            <returns>Label or empty if not found due to invalid range or the index being a separator.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetCommandIdAt(System.Int32)">
            <summary>
            Returns the command id at the specified index or -1 if not found due to invalid range or the index being a separator.
            </summary>
            <param name="index">the index</param>
            <returns>Command or -1 if not found due to invalid range or the index being a separator.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.Remove(CefSharp.CefMenuCommand)">
            <summary>
            Removes the item with the specified commandId.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.AddItem(CefSharp.CefMenuCommand,System.String)">
            <summary>
            Add an item to the menu. 
            </summary>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.AddSeparator">
            <summary>
            Add a separator to the menu. 
            </summary>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.AddCheckItem(CefSharp.CefMenuCommand,System.String)">
            <summary>
            Add a check item to the menu.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.AddRadioItem(CefSharp.CefMenuCommand,System.String,System.Int32)">
            <summary>
            Add a radio item to the menu. Only a single item with the specified groupId can be checked at a time.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.AddSubMenu(CefSharp.CefMenuCommand,System.String)">
            <summary>
            Add a sub-menu to the menu. The new sub-menu is returned.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns the newly created <see cref="T:CefSharp.IMenuModel"/>.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.InsertSeparatorAt(System.Int32)">
            <summary>
            Insert a separator in the menu at the specified index. 
            </summary>
            <param name="index">index</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.InsertItemAt(System.Int32,CefSharp.CefMenuCommand,System.String)">
            <summary>
            Insert an item in the menu at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns true on success.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.InsertCheckItemAt(System.Int32,CefSharp.CefMenuCommand,System.String)">
            <summary>
            Insert a check item in the menu at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.InsertRadioItemAt(System.Int32,CefSharp.CefMenuCommand,System.String,System.Int32)">
            <summary>
            Insert a radio item in the menu at the specified index.
            Only a single item with the specified groupId can be checked at a time.
            </summary>
            <param name="index">index</param>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <param name="groupId">the group id</param>
            <returns>Returns true on success.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.InsertSubMenuAt(System.Int32,CefSharp.CefMenuCommand,System.String)">
            <summary>
            Insert a sub-menu in the menu at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="commandId">the command Id</param>
            <param name="label">the label of the item</param>
            <returns>Returns the newly created <see cref="T:CefSharp.IMenuModel"/>.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">index</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetIndexOf(CefSharp.CefMenuCommand)">
            <summary>
            Returns the index associated with the specified commandId or -1 if not found due to the command id not existing in the menu.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns the index associated with the specified commandId or -1 if not found due to the command id not existing in the menu.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetCommandIdAt(System.Int32,CefSharp.CefMenuCommand)">
            <summary>
            Sets the command id at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="commandId">the command Id</param>
            <returns>Returns true on success.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.GetLabel(CefSharp.CefMenuCommand)">
            <summary>
            Returns the label for the specified commandId or empty if not found.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns the label for the specified commandId or empty if not found.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetLabel(CefSharp.CefMenuCommand,System.String)">
            <summary>
            Sets the label for the specified commandId. 
            </summary>
            <param name="commandId">the command Id</param>
            <param name="label">the label</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetLabelAt(System.Int32,System.String)">
            <summary>
            Set the label at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="label">the label</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetType(CefSharp.CefMenuCommand)">
            <summary>
            Returns the item type for the specified commandId.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns the item type for the specified commandId.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetTypeAt(System.Int32)">
            <summary>
            Returns the item type at the specified index.
            </summary>
            <param name="index">index</param>
            <returns>Returns the item type at the specified index.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetGroupId(CefSharp.CefMenuCommand)">
            <summary>
            Returns the group id for the specified commandId or -1 if invalid.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns the group id for the specified commandId or -1 if invalid.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.GetGroupIdAt(System.Int32)">
            <summary>
            Returns the group id at the specified index or -1 if invalid.
            </summary>
            <param name="index">index</param>
            <returns>Returns the group id at the specified index or -1 if invalid.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.SetGroupId(CefSharp.CefMenuCommand,System.Int32)">
            <summary>
            Sets the group id for the specified commandId.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="groupId">the group id</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetGroupIdAt(System.Int32,System.Int32)">
            <summary>
            Sets the group id at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="groupId">the group id</param>
            <returns>Returns true on success.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.GetSubMenu(CefSharp.CefMenuCommand)">
            <summary>
            Returns the <see cref="T:CefSharp.IMenuModel"/> for the specified commandId or null if invalid.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns the <see cref="T:CefSharp.IMenuModel"/> for the specified commandId or null if invalid.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.GetSubMenuAt(System.Int32)">
            <summary>
            Returns the <see cref="T:CefSharp.IMenuModel"/> at the specified index or empty if invalid.
            </summary>
            <param name="index">index</param>
            <returns>Returns the <see cref="T:CefSharp.IMenuModel"/> for the specified commandId or null if invalid.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.IsVisible(CefSharp.CefMenuCommand)">
            <summary>
            Returns true if the specified commandId is visible.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns true if the specified commandId is visible.</returns>        
        </member>
        <member name="M:CefSharp.IMenuModel.IsVisibleAt(System.Int32)">
            <summary>
            Returns true if the specified index is visible.
            </summary>
            <param name="index">index</param>
            <returns>Returns true if the specified index is visible.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetVisible(CefSharp.CefMenuCommand,System.Boolean)">
            <summary>
            Change the visibility of the specified commandId.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="visible">visible</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetVisibleAt(System.Int32,System.Boolean)">
            <summary>
            Change the visibility at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="visible">visible</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.IsEnabled(CefSharp.CefMenuCommand)">
            <summary>
            Returns true if the specified commandId is enabled.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns true if the specified commandId is enabled.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.IsEnabledAt(System.Int32)">
            <summary>
            Returns true if the specified index is enabled.
            </summary>
            <param name="index">index</param>
            <returns>Returns true if the specified index is enabled.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetEnabled(CefSharp.CefMenuCommand,System.Boolean)">
            <summary>
            Change the enabled status of the specified commandId.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="enabled">is enabled</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetEnabledAt(System.Int32,System.Boolean)">
            <summary>
            Change the enabled status at the specified index.
            </summary>
            <param name="index">index</param>
            <param name="enabled">is enabled</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.IsChecked(CefSharp.CefMenuCommand)">
            <summary>
            Returns true if the specified commandId is checked. Only applies to check and radio items.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns true if the specified commandId is checked. Only applies to check and radio items.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.IsCheckedAt(System.Int32)">
            <summary>
            Returns true if the specified index is checked. Only applies to check and radio items.
            </summary>
            <param name="index">index</param>
            <returns>Returns true if the specified index is checked. Only applies to check and radio items.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetChecked(CefSharp.CefMenuCommand,System.Boolean)">
            <summary>
            Check the specified commandId. Only applies to check and radio items.
            </summary>
            <param name="commandId">the command Id</param>
            <param name="isChecked">set checked</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetCheckedAt(System.Int32,System.Boolean)">
            <summary>
            Check the specified index. Only applies to check and radio items.
            </summary>
            <param name="index">index</param>
            <param name="isChecked">set checked</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.HasAccelerator(CefSharp.CefMenuCommand)">
            <summary>
            Returns true if the specified commandId has a keyboard accelerator assigned.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns true if the specified commandId has a keyboard accelerator assigned.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.HasAcceleratorAt(System.Int32)">
            <summary>
            Returns true if the specified index has a keyboard accelerator assigned.
            </summary>
            <param name="index">index</param>
            <returns>Returns true if the specified index has a keyboard accelerator assigned.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetAccelerator(CefSharp.CefMenuCommand,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the keyboard accelerator for the specified commandId. 
            </summary>
            <param name="commandId">the command Id</param>
            <param name="keyCode">keyCode can be any key or character value. </param>
            <param name="shiftPressed">shift key pressed</param>
            <param name="ctrlPressed">ctrl key pressed</param>
            <param name="altPressed">alt key pressed</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.SetAcceleratorAt(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the keyboard accelerator at the specified index. keyCode can be any key or character value.
            </summary>
            <param name="index">index</param>
            <param name="keyCode">keyCode can be any key or character value. </param>
            <param name="shiftPressed">shift key pressed</param>
            <param name="ctrlPressed">ctrl key pressed</param>
            <param name="altPressed">alt key pressed</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.RemoveAccelerator(CefSharp.CefMenuCommand)">
            <summary>
            Remove the keyboard accelerator for the specified commandId.
            </summary>
            <param name="commandId">the command Id</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.RemoveAcceleratorAt(System.Int32)">
            <summary>
            Remove the keyboard accelerator at the specified index. 
            </summary>
            <param name="index">index</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetAccelerator(CefSharp.CefMenuCommand,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Retrieves the keyboard accelerator for the specified commandId. 
            </summary>
            <param name="commandId">the command Id</param>
            <param name="keyCode">keyCode can be any key or character value. </param>
            <param name="shiftPressed">shift key pressed</param>
            <param name="ctrlPressed">ctrl key pressed</param>
            <param name="altPressed">alt key pressed</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:CefSharp.IMenuModel.GetAcceleratorAt(System.Int32,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Retrieves the keyboard accelerator for the specified index.
            </summary>
            <param name="index">index</param>
            <param name="keyCode">keyCode can be any key or character value. </param>
            <param name="shiftPressed">shift key pressed</param>
            <param name="ctrlPressed">ctrl key pressed</param>
            <param name="altPressed">alt key pressed</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="P:CefSharp.IMenuModel.Count">
            <summary>
            Returns the number of items in this menu.
            </summary>
        </member>
        <member name="T:CefSharp.IPrintToPdfCallback">
            <summary>
            Callback interface for <see cref="!:IBrowserHost.PrintToPDF"/>. The methods of this interface
            will be called on the CEF UI thread.
            </summary>
        </member>
        <member name="M:CefSharp.IPrintToPdfCallback.OnPdfPrintFinished(System.String,System.Boolean)">
            <summary>
            Method that will be executed when the PDF printing has completed.
            </summary>
            <param name="path">The output path.</param>
            <param name="ok">Will be true if the printing completed
            successfully or false otherwise.</param>
        </member>
        <member name="P:CefSharp.ISslInfo.SerialNumber">
            <summary>
            Returns the DER encoded serial number for the X.509 certificate. The value
            possibly includes a leading 00 byte.
            </summary>
        </member>
        <member name="P:CefSharp.ISslInfo.ValidStart">
            <summary>
            Returns the date before which the X.509 certificate is invalid.
            will return null if no date was specified.
            </summary>
        </member>
        <member name="P:CefSharp.ISslInfo.ValidExpiry">
            <summary>
            Returns the date after which the X.509 certificate is invalid.
            will return null if no date was specified.
            </summary>
        </member>
        <member name="P:CefSharp.ISslInfo.DerEncoded">
            <summary>
            Returns the DER encoded data for the X.509 certificate.
            </summary>
        </member>
        <member name="P:CefSharp.ISslInfo.PemEncoded">
            <summary>
            Returns the PEM encoded data for the X.509 certificate.
            </summary>
        </member>
        <member name="T:CefSharp.KeyEvent">
            <summary>
            Class representing a a keyboard event.
            </summary>
        </member>
        <member name="P:CefSharp.KeyEvent.Type">
            <summary>
            The type of keyboard event.
            </summary>
        </member>
        <member name="P:CefSharp.KeyEvent.Modifiers">
            <summary>
            Bit flags describing any pressed modifier keys. See
            cef_event_flags_t for values.
            </summary>
        </member>
        <member name="P:CefSharp.KeyEvent.WindowsKeyCode">
            <summary>
            The Windows key code for the key event. This value is used by the DOM
            specification. Sometimes it comes directly from the event (i.e. on
            Windows) and sometimes it's determined using a mapping function. See
            WebCore/platform/chromium/KeyboardCodes.h for the list of values.
            </summary>
        </member>
        <member name="P:CefSharp.KeyEvent.NativeKeyCode">
            <summary>
            The actual key code genenerated by the platform.
            </summary>
        </member>
        <member name="P:CefSharp.KeyEvent.IsSystemKey">
            <summary>
            Indicates whether the event is considered a "system key" event (see
            http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
            This value will always be false on non-Windows platforms.
            </summary>
        </member>
        <member name="P:CefSharp.KeyEvent.FocusOnEditableField">
            <summary>
            True if the focus is currently on an editable field on the page. This is useful for determining if standard key events should be intercepted.
            </summary>
        </member>
        <member name="F:CefSharp.KeyEventType.RawKeyDown">
            <summary>
            Notification that a key transitioned from "up" to "down".
            </summary>
        </member>
        <member name="F:CefSharp.KeyEventType.KeyDown">
            <summary>
            Notification that a key was pressed. This does not necessarily correspond
            to a character depending on the key and language. Use KEYEVENT_CHAR for
            character input.
            </summary>
        </member>
        <member name="F:CefSharp.KeyEventType.KeyUp">
            <summary>
            Notification that a key was released.
            </summary>
        </member>
        <member name="F:CefSharp.KeyEventType.Char">
            <summary>
            Notification that a character was typed. Use this for text input. Key
            down events may generate 0, 1, or more than one character event depending
            on the key, locale, and operating system.
            </summary>
        </member>
        <member name="M:CefSharp.IPostData.AddElement(CefSharp.IPostDataElement)">
            <summary>
            Add the specified <see cref="T:CefSharp.IPostDataElement"/>.
            </summary>
            <param name="element">element to be added.</param>
            <returns> Returns true if the add succeeds.</returns>
        </member>
        <member name="M:CefSharp.IPostData.RemoveElement(CefSharp.IPostDataElement)">
            <summary>
            Remove  the specified <see cref="T:CefSharp.IPostDataElement"/>.
            </summary>
            <param name="element">element to be removed.</param>
            <returns> Returns true if the add succeeds.</returns>
        </member>
        <member name="M:CefSharp.IPostData.RemoveElements">
            <summary>
            Remove all existing post data elements.
            </summary>
        </member>
        <member name="M:CefSharp.IPostData.CreatePostDataElement">
            <summary>
            Create a new <see cref="T:CefSharp.IPostDataElement"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:CefSharp.IPostData.Elements">
            <summary>
            Retrieve the post data elements.
            </summary>
        </member>
        <member name="P:CefSharp.IPostData.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="P:CefSharp.IPostData.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed of.
            </summary>
        </member>
        <member name="P:CefSharp.IPostData.HasExcludedElements">
            <summary>
            Returns true if the underlying POST data includes elements that are not
            represented by this IPostData object (for example, multi-part file upload
            data). Modifying IPostData objects with excluded elements may result in
            the request failing.
            </summary>
        </member>
        <member name="M:CefSharp.IPostDataElement.SetToEmpty">
            <summary>
            Remove all contents from the post data element.
            </summary>
        </member>
        <member name="P:CefSharp.IPostDataElement.File">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:CefSharp.IPostDataElement.IsReadOnly">
            <summary>
            Gets if the object is read-only.
            </summary>
        </member>
        <member name="P:CefSharp.IPostDataElement.Type">
            <summary>
            Gets the type of this <see cref="T:CefSharp.IPostDataElement"/>.
            </summary>
        </member>
        <member name="P:CefSharp.IPostDataElement.Bytes">
            <summary>
            Gets or sets the bytes of this <see cref="T:CefSharp.IPostDataElement"/>.
            </summary>
        </member>
        <member name="T:CefSharp.CefReturnValue">
            <summary>
            Return value types.
            </summary>
        </member>
        <member name="F:CefSharp.CefReturnValue.Cancel">
            <summary>
            Cancel immediately.
            </summary>
        </member>
        <member name="F:CefSharp.CefReturnValue.Continue">
            <summary>
            Continue immediately.
            </summary>
        </member>
        <member name="F:CefSharp.CefReturnValue.ContinueAsync">
            <summary>
            Continue asynchronously (usually via a callback).
            </summary>
        </member>
        <member name="M:CefSharp.CefSharpSettings.#cctor">
            <summary>
            Set default values for CefSharpSettings
            </summary>
        </member>
        <member name="P:CefSharp.CefSharpSettings.WcfEnabled">
            <summary>
            WCF is used by JavascriptBinding
            Disabling effectively disables both of these features.
            Defaults to true
            </summary>
        </member>
        <member name="P:CefSharp.CefSharpSettings.WcfTimeout">
            <summary>
            Change the Close timeout for the WCF channel used by the sync JSB binding.
            The default value is currently 10 seconds. Chaning this to <see cref="F:System.TimeSpan.Zero"/>
            will result on Abort() being called on the WCF Channel Host
            </summary>
        </member>
        <member name="P:CefSharp.CefSharpSettings.ShutdownOnExit">
            <summary>
            For the WinForms and WPF instances of ChromiumWebBrowser the relevant Application Exit event
            is hooked and Cef.Shutdown() called by default. Set this to false to disable this behaviour.
            This value needs to be set before the first instance of ChromiumWebBrowser is created as
            the event handlers are hooked in the static constructor for the ChromiumWebBrowser class
            </summary>
        </member>
        <member name="T:CefSharp.CefState">
            <summary>
            Represents the state of a setting.
            </summary>
        </member>
        <member name="F:CefSharp.CefState.Default">
            <summary>
            Use the default state for the setting.
            </summary>
        </member>
        <member name="F:CefSharp.CefState.Enabled">
            <summary>
            Enable or allow the setting.
            </summary>
        </member>
        <member name="F:CefSharp.CefState.Disabled">
            <summary>
            Disable or disallow the setting.
            </summary>
        </member>
        <member name="T:CefSharp.CefThreadIds">
            <summary>
            Managed enum for cef_thread_id_t/CefThreadId
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_UI">
            <summary>
            The CEF UI thread in the browser. In CefSharp this is ALWAYS
            separate from the application's main thread (and thus the main 
            WinForm UI thread).
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_DB">
            <summary>
            Used to interact with the database.
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_FILE">
            <summary>
            Used to interact with the file system.
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_FILE_USER_BLOCKING">
            <summary>
            Used for file system operations that block user interactions.
            Responsiveness of this thread affects users.
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_PROCESS_LAUNCHER">
            <summary>
            Used to launch and terminate browser processes.
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_CACHE">
            <summary>
            Used to handle slow HTTP cache operations.
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_IO">
            <summary>
            Used to process IPC and network messages.
            </summary>
        </member>
        <member name="F:CefSharp.CefThreadIds.TID_RENDERER">
            <summary>
            The main thread in the renderer. Used for all WebKit and V8 interaction.
            </summary>
        </member>
        <member name="T:CefSharp.IAuthCallback">
            <summary>
            Callback interface used for asynchronous continuation of authentication requests.
            </summary>
        </member>
        <member name="M:CefSharp.IAuthCallback.Continue(System.String,System.String)">
            <summary>
            Continue the authentication request.
            </summary>
            <param name="username">requested username</param>
            <param name="password">requested password</param>
        </member>
        <member name="M:CefSharp.IAuthCallback.Cancel">
            <summary>
            Cancel the authentication request.
            </summary>
        </member>
        <member name="P:CefSharp.IAuthCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.IBeforeDownloadCallback">
            <summary>
            Callback interface used to asynchronously continue a download.
            </summary>
        </member>
        <member name="M:CefSharp.IBeforeDownloadCallback.Continue(System.String,System.Boolean)">
            <summary>
            Call to continue the download.
            </summary>
            <param name="downloadPath">full file path for the download including the file name
            or leave blank to use the suggested name and the default temp directory</param>
            <param name="showDialog">Set to true if you do wish to show the default "Save As" dialog</param>
        </member>
        <member name="P:CefSharp.IBeforeDownloadCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="M:CefSharp.IResourceHandlerFactory.GetResourceHandler(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest)">
            <summary>
            Called before a resource is loaded. To specify a handler for the resource return a <see cref="T:CefSharp.ResourceHandler"/> object
            </summary>
            <param name="browserControl">The browser UI control</param>
            <param name="browser">the browser object</param>
            <param name="frame">the frame object</param>
            <param name="request">the request object - cannot be modified in this callback</param>
            <returns>To allow the resource to load normally return NULL otherwise return an instance of ResourceHandler with a valid stream</returns>
        </member>
        <member name="P:CefSharp.IResourceHandlerFactory.HasHandlers">
            <summary>
            Are there any <see cref="T:CefSharp.ResourceHandler"/>'s registered?
            </summary>
        </member>
        <member name="M:CefSharp.DefaultResourceHandlerFactory.GetResourceHandler(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest)">
            <summary>
            Called before a resource is loaded. To specify a handler for the resource return a <see cref="T:CefSharp.ResourceHandler"/> object
            </summary>
            <param name="browserControl">The browser UI control</param>
            <param name="browser">the browser object</param>
            <param name="frame">the frame object</param>
            <param name="request">the request object - cannot be modified in this callback</param>
            <returns>To allow the resource to load normally return NULL otherwise return an instance of ResourceHandler with a valid stream</returns>
        </member>
        <member name="P:CefSharp.DefaultResourceHandlerFactory.HasHandlers">
            <summary>
            Are there any <see cref="T:CefSharp.ResourceHandler"/>'s registered?
            </summary>
        </member>
        <member name="T:CefSharp.DependencyChecker">
            <summary>
            DependencyChecker provides a known list of Cef/CefSharp dependencies and 
            provides helper methods to check for their existance.
            </summary>
        </member>
        <member name="F:CefSharp.DependencyChecker.CefDependencies">
            <summary>
            List of Cef Dependencies
            </summary>
        </member>
        <member name="F:CefSharp.DependencyChecker.CefResources">
            <summary>
            List of Cef Resources (pack files)
            </summary>
        </member>
        <member name="F:CefSharp.DependencyChecker.CefSharpDependencies">
            <summary>
            List of CefSharp Dependencies
            </summary>
        </member>
        <member name="F:CefSharp.DependencyChecker.BrowserSubprocessDependencies">
            <summary>
            List of CefSharp.BrowserSubprocess.exe dependencies.
            </summary>
        </member>
        <member name="M:CefSharp.DependencyChecker.CheckDependencies(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            CheckDependencies iterates through the list of Cef and CefSharp dependencines
            relative to the path provided and returns a list of missing ones
            </summary>
            <param name="checkOptional">check to see if optional dependencies are present</param>
            <param name="packLoadingDisabled">Is loading of pack files disabled?</param>
            <param name="path">path to check for dependencies</param>
            <param name="resourcesDirPath">The path to the resources directory, if empty the Executing Assembly path is used.</param>
            <param name="browserSubProcessPath">The path to a separate executable that will be launched for sub-processes.</param>
            <param name="localePackFile">The locale pack file e.g. <see cref="F:CefSharp.DependencyChecker.LocalesPackFile"/> </param>
            <returns>List of missing dependencies, if all present an empty List will be returned</returns>
        </member>
        <member name="M:CefSharp.DependencyChecker.CheckDependencyList(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loop through dependencies and add to the returned missing dependency list if not found.
            </summary>
            <param name="dir">The directory of the dependencies, or the current directory if null.</param>
            <param name="files">The dependencies to check.</param>
            <returns>List of missing dependencies, if all present an empty List will be returned</returns>
        </member>
        <member name="M:CefSharp.DependencyChecker.AssertAllDependenciesPresent(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Checks if all Cef and CefSharp dependencies were found relative to the Executing Assembly.
            Shortcut method that calls <see cref="M:CefSharp.DependencyChecker.CheckDependencies(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)"/>, throws an Exception if not files are missing.
            </summary>
            <param name="locale">The locale, if empty then en-US will be used.</param>
            <param name="localesDirPath">The path to the locales directory, if empty locales\ will be used.</param>
            <param name="resourcesDirPath">The path to the resources directory, if empty the Executing Assembly path is used.</param>
            <param name="packLoadingDisabled">Is loading of pack files disabled?</param>
            <param name="browserSubProcessPath">The path to a separate executable that will be launched for sub-processes.</param>
            <exception cref="T:System.Exception">Throw when not all dependencies are present</exception>
        </member>
        <member name="P:CefSharp.DependencyChecker.IsWindowsXp">
            <summary>
            IsWindowsXp - Special case for legacy XP support
            </summary>
        </member>
        <member name="T:CefSharp.IBrowser">
            <summary>
            CefSharp interface for CefBrowser.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowser.GetHost">
            <summary>
            Returns the browser host object. This method can only be called in the browser process.
            </summary>
            <returns>the browser host object</returns>
        </member>
        <member name="M:CefSharp.IBrowser.GoBack">
            <summary>
            Navigate backwards.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowser.GoForward">
            <summary>
            Navigate forwards.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowser.CloseBrowser(System.Boolean)">
            <summary>
            Request that the browser close. The JavaScript 'onbeforeunload' event will
            be fired. If |forceClose| is false the event handler, if any, will be
            allowed to prompt the user and the user can optionally cancel the close.
            If |force_close| is true the prompt will not be displayed and the close
            will proceed. Results in a call to CefLifeSpanHandler::DoClose() if the
            event handler allows the close or if |force_close| is true. See
            CefLifeSpanHandler::DoClose() documentation for additional usage
            information.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowser.Reload(System.Boolean)">
            <summary>
            Reload the current page.
            </summary>
            <param name="ignoreCache">
            <c>true</c> a reload is performed ignoring browser cache; <c>false</c> a reload is
            performed using files from the browser cache, if available.
            </param>
        </member>
        <member name="M:CefSharp.IBrowser.StopLoad">
            <summary>
            Stop loading the page.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowser.IsSame(CefSharp.IBrowser)">
            <summary>
            Returns true if this object is pointing to the same handle as that object.
            </summary>
            <param name="that">compare browser instances</param>
            <returns>returns true if the same instance</returns>
        </member>
        <member name="M:CefSharp.IBrowser.GetFrame(System.Int64)">
            <summary>
            Returns the frame with the specified identifier, or NULL if not found.
            </summary>
            <param name="identifier">identifier</param>
            <returns>frame or null</returns>
        </member>
        <member name="M:CefSharp.IBrowser.GetFrame(System.String)">
            <summary>
            Returns the frame with the specified name, or NULL if not found.
            </summary>
            <param name="name">name of frame</param>
            <returns>frame or null</returns>
        </member>
        <member name="M:CefSharp.IBrowser.GetFrameCount">
            <summary>
            Returns the number of frames that currently exist.
            </summary>
            <returns>the number of frames</returns>
        </member>
        <member name="M:CefSharp.IBrowser.GetFrameIdentifiers">
            <summary>
            Returns the identifiers of all existing frames.
            </summary>
            <returns>list of frame identifiers</returns>
        </member>
        <member name="M:CefSharp.IBrowser.GetFrameNames">
            <summary>
            Returns the names of all existing frames.
            </summary>
            <returns>frame names</returns>
        </member>
        <member name="P:CefSharp.IBrowser.CanGoBack">
            <summary>
            Returns true if the browser can navigate backwards.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.CanGoForward">
            <summary>
            Returns true if the browser can navigate forwards.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.IsLoading">
            <summary>
            Returns true if the browser is currently loading.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.Identifier">
            <summary>
            Returns the globally unique identifier for this browser.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.IsPopup">
            <summary>
            Returns true if the window is a popup window.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.HasDocument">
            <summary>
            Returns true if a document has been loaded in the browser.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.MainFrame">
            <summary>
            Returns the main (top-level) frame for the browser window.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.FocusedFrame">
            <summary>
            Returns the focused frame for the browser window.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowser.IsDisposed">
            <summary>
            Gets a value indicating whether the browser has been disposed of.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.AddWordToDictionary(System.String)">
            <summary>
            Add the specified word to the spelling dictionary.
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:CefSharp.IBrowserHost.CloseBrowser(System.Boolean)">
            <summary>
            Request that the browser close. The JavaScript 'onbeforeunload' event will be fired.
            </summary>
            <param name="forceClose">
            If forceClose is false the event handler, if any, will be allowed to prompt the user and the
            user can optionally cancel the close. If forceClose is true the prompt will not be displayed
            and the close will proceed. Results in a call to <see cref="M:CefSharp.ILifeSpanHandler.DoClose(CefSharp.IWebBrowser,CefSharp.IBrowser)"/> if
            the event handler allows the close or if forceClose is true
            See <see cref="M:CefSharp.ILifeSpanHandler.DoClose(CefSharp.IWebBrowser,CefSharp.IBrowser)"/> documentation for additional usage information.
            </param>
        </member>
        <member name="M:CefSharp.IBrowserHost.CloseDevTools">
            <summary>
            Explicitly close the developer tools window if one exists for this browser instance.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.DragTargetDragEnter(CefSharp.IDragData,CefSharp.MouseEvent,CefSharp.DragOperationsMask)">
            <summary>
            Call this method when the user drags the mouse into the web view (before calling <see cref="M:CefSharp.IBrowserHost.DragTargetDragOver(CefSharp.MouseEvent,CefSharp.DragOperationsMask)"/>/<see cref="M:CefSharp.IBrowserHost.DragTargetDragLeave"/>/<see cref="M:CefSharp.IBrowserHost.DragTargetDragDrop(CefSharp.MouseEvent)"/>).
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.DragTargetDragOver(CefSharp.MouseEvent,CefSharp.DragOperationsMask)">
            <summary>
            Call this method each time the mouse is moved across the web view during a drag operation (after calling <see cref="M:CefSharp.IBrowserHost.DragTargetDragEnter(CefSharp.IDragData,CefSharp.MouseEvent,CefSharp.DragOperationsMask)"/> and before calling <see cref="M:CefSharp.IBrowserHost.DragTargetDragLeave"/>/<see cref="M:CefSharp.IBrowserHost.DragTargetDragDrop(CefSharp.MouseEvent)"/>). 
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.DragTargetDragDrop(CefSharp.MouseEvent)">
            <summary>
            Call this method when the user completes the drag operation by dropping the object onto the web view (after calling <see cref="M:CefSharp.IBrowserHost.DragTargetDragEnter(CefSharp.IDragData,CefSharp.MouseEvent,CefSharp.DragOperationsMask)"/>). 
            The object being dropped is <see cref="T:CefSharp.IDragData"/>, given as an argument to the previous <see cref="M:CefSharp.IBrowserHost.DragTargetDragEnter(CefSharp.IDragData,CefSharp.MouseEvent,CefSharp.DragOperationsMask)"/> call. 
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.DragTargetDragLeave">
            <summary>
            Call this method when the user drags the mouse out of the web view (after calling <see cref="M:CefSharp.IBrowserHost.DragTargetDragEnter(CefSharp.IDragData,CefSharp.MouseEvent,CefSharp.DragOperationsMask)"/>). This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.Find(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Search for text
            </summary>
            <param name="identifier">can be used to have multiple searches running simultaniously</param>
            <param name="searchText">text to search for</param>
            <param name="forward">indicates whether to search forward or backward within the page</param>
            <param name="matchCase">indicates whether the search should be case-sensitive</param>
            <param name="findNext">indicates whether this is the first request or a follow-up</param>
            <remarks>The IFindHandler instance, if any, will be called to report find results. </remarks>
        </member>
        <member name="M:CefSharp.IBrowserHost.GetOpenerWindowHandle">
            <summary>
            Retrieve the window handle of the browser that opened this browser.
            </summary>
            <returns>The handler</returns>
        </member>
        <member name="M:CefSharp.IBrowserHost.GetWindowHandle">
            <summary>
            Retrieve the window handle for this browser. 
            </summary>
            <returns>The handler</returns>
        </member>
        <member name="M:CefSharp.IBrowserHost.GetZoomLevelAsync">
            <summary>
            Get the current zoom level. The default zoom level is 0.0. This method can only be called on the CEF UI thread. 
            </summary>
            <returns> a <see cref="T:System.Threading.Tasks.Task`1"/> that when executed returns the zoom level as a double.</returns>
        </member>
        <member name="M:CefSharp.IBrowserHost.Invalidate(CefSharp.PaintElementType)">
            <summary>
            Invalidate the view. The browser will call CefRenderHandler::OnPaint asynchronously.
            This method is only used when window rendering is disabled (OSR). 
            </summary>
            <param name="type">indicates which surface to re-paint either View or Popup.</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.NotifyMoveOrResizeStarted">
            <summary>
            Notify the browser that the window hosting it is about to be moved or resized.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.NotifyScreenInfoChanged">
            <summary>
            Send a notification to the browser that the screen info has changed.
            The browser will then call CefRenderHandler::GetScreenInfo to update the screen information with the new values.
            This simulates moving the webview window from one display to another, or changing the properties of the current display.
            This method is only used when window rendering is disabled. 
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.Print">
            <summary>
            Print the current browser contents. 
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.PrintToPdfAsync(System.String,CefSharp.PdfPrintSettings)">
            <summary>
            Asynchronously prints the current browser contents to the Pdf file specified.
            The caller is responsible for deleting the file when done.
            </summary>
            <param name="path">Output file location.</param>
            <param name="settings">Print Settings.</param>
            <returns>A task that represents the asynchronous print operation.
            The result is true on success or false on failure to generate the Pdf.</returns>
        </member>
        <member name="M:CefSharp.IBrowserHost.ReplaceMisspelling(System.String)">
            <summary>
            If a misspelled word is currently selected in an editable node calling this method will replace it with the specified word.
            </summary>
            <param name="word">word to be replaced</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendCaptureLostEvent">
            <summary>
            Send a capture lost event to the browser.
            </summary>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendFocusEvent(System.Boolean)">
            <summary>
            Send a focus event to the browser. . (Used for OSR Rendering e.g. WPF or OffScreen)
            </summary>
            <param name="setFocus">set focus</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendKeyEvent(CefSharp.KeyEvent)">
            <summary>
             Send a key event to the browser.
            </summary>
            <param name="keyEvent">represents keyboard event</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendKeyEvent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Send key event to browser based on operating system message
            </summary>
            <param name="message">message</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendMouseClickEvent(System.Int32,System.Int32,CefSharp.MouseButtonType,System.Boolean,System.Int32,CefSharp.CefEventFlags)">
            <summary>
            Send a mouse click event to the browser.
            </summary>
            <param name="x">x coordinate - relative to upper-left corner of view</param>
            <param name="y">y coordinate - relative to upper-left corner of view</param>
            <param name="mouseButtonType">Mouse ButtonType</param>
            <param name="mouseUp">mouse up</param>
            <param name="clickCount">click count</param>
            <param name="modifiers">click modifiers e.g. Ctrl</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendMouseWheelEvent(System.Int32,System.Int32,System.Int32,System.Int32,CefSharp.CefEventFlags)">
            <summary>
            Send a mouse wheel event to the browser.
            </summary>
            <param name="x">X-Axis coordinate relative to the upper-left corner of the view.</param>
            <param name="y">Y-Axis coordinate relative to the upper-left corner of the view.</param>
            <param name="deltaX">Movement delta for X direction.</param>
            <param name="deltaY">movement delta for Y direction.</param>
            /// <param name="modifiers">click modifiers e.g. Ctrl</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SetFocus(System.Boolean)">
            <summary>
            Set whether the browser is focused. (Used for Normal Rendering e.g. WinForms)
            </summary>
            <param name="focus">set focus</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SetZoomLevel(System.Double)">
            <summary>
            Change the zoom level to the specified value. Specify 0.0 to reset the zoom level.
            If called on the CEF UI thread the change will be applied immediately.
            Otherwise, the change will be applied asynchronously on the UI thread. 
            </summary>
            <param name="zoomLevel">zoom level</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.ShowDevTools(CefSharp.IWindowInfo,System.Int32,System.Int32)">
            <summary>
            Open developer tools in its own window. If inspectElementAtX and/or inspectElementAtY  are specified then
            the element at the specified (x,y) location will be inspected.
            </summary>
            <param name="windowInfo">window info used for showing dev tools</param>
            <param name="inspectElementAtX">x coordinate (used for inspectElement)</param>
            <param name="inspectElementAtY">y coordinate (used for inspectElement)</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.StartDownload(System.String)">
            <summary>
            Download the file at url using IDownloadHandler. 
            </summary>
            <param name="url">url to download</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.StopFinding(System.Boolean)">
            <summary>
            Cancel all searches that are currently going on. 
            </summary>
            <param name="clearSelection">clear the selection</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.SendMouseMoveEvent(System.Int32,System.Int32,System.Boolean,CefSharp.CefEventFlags)">
            <summary>
            Send a mouse move event to the browser
            </summary>
            <param name="x">x coordinate - relative to upper-left corner of view</param>
            <param name="y">y coordinate - relative to upper-left corner of view</param>
            <param name="mouseLeave">mouse leave</param>
            <param name="modifiers">click modifiers .e.g Ctrl</param>
        </member>
        <member name="M:CefSharp.IBrowserHost.WasHidden(System.Boolean)">
            <summary>
            Notify the browser that it has been hidden or shown.
            Layouting and rendering notification will stop when the browser is hidden.
            This method is only used when window rendering is disabled (WPF/OffScreen). 
            </summary>
            <param name="hidden"></param>
        </member>
        <member name="M:CefSharp.IBrowserHost.WasResized">
            <summary>
            Notify the browser that the widget has been resized.
            The browser will first call CefRenderHandler::GetViewRect to get the new size and then call CefRenderHandler::OnPaint asynchronously with the updated regions.
            This method is only used when window rendering is disabled. 
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserHost.MouseCursorChangeDisabled">
            <summary>
            Get/Set Mouse cursor change disabled
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserHost.RequestContext">
            <summary>
            Returns the request context for this browser.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserHost.WindowlessFrameRate">
            <summary>
            Gets/sets the maximum rate in frames per second (fps) that CefRenderHandler::
            OnPaint will be called for a windowless browser. The actual fps may be
            lower if the browser cannot generate frames at the requested rate. The
            minimum value is 1 and the maximum value is 60 (default 30). This method
            can only be called on the UI thread. Can also be set at browser creation
            via BrowserSettings.WindowlessFrameRate.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserHost.WindowRenderingDisabled">
            <summary>
            Returns true if window rendering is disabled.
            </summary>
        </member>
        <member name="P:CefSharp.IBrowserHost.IsDisposed">
            <summary>
            Gets a value indicating whether the browserHost has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.ICallback">
            <summary>
            Generic callback interface used for asynchronous continuation.
            </summary>
        </member>
        <member name="M:CefSharp.ICallback.Continue">
            <summary>
            Continue processing.
            </summary>
        </member>
        <member name="M:CefSharp.ICallback.Cancel">
            <summary>
            Cancel processing.
            </summary>
        </member>
        <member name="P:CefSharp.ICallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.IDownloadItemCallback">
            <summary>
            Callback interface used to asynchronously cancel a download.
            </summary>
        </member>
        <member name="M:CefSharp.IDownloadItemCallback.Cancel">
            <summary>
            Call to cancel the download.
            </summary>
        </member>
        <member name="M:CefSharp.IDownloadItemCallback.Pause">
            <summary>
            Call to pause the download.
            </summary>
        </member>
        <member name="M:CefSharp.IDownloadItemCallback.Resume">
            <summary>
            Call to resume the download.
            </summary>
        </member>
        <member name="P:CefSharp.IDownloadItemCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.IFileDialogCallback">
            <summary>
            Callback interface for asynchronous continuation of file dialog requests.
            </summary>
        </member>
        <member name="M:CefSharp.IFileDialogCallback.Continue(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Continue the file selection.
            </summary>
            <param name="selectedAcceptFilter">should be the 0-based index of the value selected from the accept filters
            array passed to <see cref="M:CefSharp.IDialogHandler.OnFileDialog(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.CefFileDialogMode,System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,CefSharp.IFileDialogCallback)"/></param>
            <param name="filePaths">should be a single value or a list of values depending on the dialog mode.
            An empty value is treated the same as calling Cancel().</param>
        </member>
        <member name="M:CefSharp.IFileDialogCallback.Cancel">
            <summary>
            Cancel the file selection.
            </summary>
        </member>
        <member name="P:CefSharp.IFileDialogCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.IFrame">
            <summary>
            This interface represents a CefFrame object (i.e. a HTML frame)
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.Undo">
            <summary>
            Execute undo in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.Redo">
            <summary>
            Execute redo in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.Cut">
            <summary>
            Execute cut in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.Copy">
            <summary>
            Execute copy in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.Paste">
            <summary>
            Execute paste in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.Delete">
            <summary>
            Execute delete in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.SelectAll">
            <summary>
            Execute select all in this frame.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.ViewSource">
            <summary>
            Save this frame's HTML source to a temporary file and open it in the
            default text viewing application. This method can only be called from the
            browser process.
            </summary>
        </member>
        <member name="M:CefSharp.IFrame.GetSourceAsync">
            <summary>
            Retrieve this frame's HTML source as a string sent to the specified visitor.
            </summary>
            <returns>
            a <see cref="T:System.Threading.Tasks.Task`1"/> that when executed returns this frame's HTML source as a string.
            </returns>
        </member>
        <member name="M:CefSharp.IFrame.GetTextAsync">
            <summary>
            Retrieve this frame's display text as a string sent to the specified visitor.
            </summary>
            <returns>
            a <see cref="T:System.Threading.Tasks.Task`1"/> that when executed returns the frame's display text as a string.
            </returns>
        </member>
        <member name="M:CefSharp.IFrame.LoadRequest(CefSharp.IRequest)">
            <summary>
            Load the custom request.
            </summary>
            <param name="request">request to be loaded in the frame</param>
        </member>
        <member name="M:CefSharp.IFrame.LoadUrl(System.String)">
            <summary>
            Load the specified url.
            </summary>
            <param name="url">url to be loaded in the frame</param>
        </member>
        <member name="M:CefSharp.IFrame.LoadStringForUrl(System.String,System.String)">
            <summary>
            Load the contents of html with the specified dummy url.
            </summary>
            <param name="html">html to be loaded</param>
            <param name="url"> should have a standard scheme (for example, http scheme) or behaviors like 
            link clicks and web security restrictions may not behave as expected.</param>
        </member>
        <member name="M:CefSharp.IFrame.ExecuteJavaScriptAsync(System.String,System.String,System.Int32)">
            <summary>
            Execute a string of JavaScript code in this frame.
            </summary>
            <param name="code">Javascript to execute</param>
            <param name="scriptUrl">is the URL where the script in question can be found, if any.
            The renderer may request this URL to show the developer the source of the error.</param>
            <param name="startLine">is the base line number to use for error reporting.</param>
        </member>
        <member name="M:CefSharp.IFrame.EvaluateScriptAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Execute some Javascript code in the context of this WebBrowser, and return the result of the evaluation
            in an Async fashion
            </summary>
            <param name="script">The Javascript code that should be executed.</param>
            <param name="timeout">The timeout after which the Javascript code execution should be aborted.</param>
            <returns>A Task that can be awaited to perform the script execution</returns>
        </member>
        <member name="M:CefSharp.IFrame.CreateRequest(System.Boolean)">
            <summary>
            Create a custom request for use with <see cref="M:CefSharp.IFrame.LoadRequest(CefSharp.IRequest)"/>
            </summary>
            <param name="initializePostData">Initialize the PostData object when creating this request</param>
            <returns>A new instance of the request</returns>
        </member>
        <member name="P:CefSharp.IFrame.IsValid">
            <summary>
            True if this object is currently attached to a valid frame.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.IsMain">
            <summary>
            Returns true if this is the main (top-level) frame.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.IsFocused">
            <summary>
            Returns true if this is the focused frame.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.Name">
            <summary>
            Returns the name for this frame. If the frame has an assigned name (for
            example, set via the iframe "name" attribute) then that value will be
            returned. Otherwise a unique name will be constructed based on the frame
            parent hierarchy. The main (top-level) frame will always have an empty name
            value.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.Identifier">
            <summary>
            Returns the globally unique identifier for this frame.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.Parent">
            <summary>
            Returns the parent of this frame or NULL if this is the main (top-level) frame.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.Url">
            <summary>
            Returns the URL currently loaded in this frame.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.Browser">
            <summary>
            Returns the browser that this frame belongs to.
            </summary>
        </member>
        <member name="P:CefSharp.IFrame.IsDisposed">
            <summary>
            Gets a value indicating whether the frame has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.IGeolocationCallback">
            <summary>
            Callback interface used for asynchronous continuation of geolocation permission requests.
            </summary>
        </member>
        <member name="M:CefSharp.IGeolocationCallback.Continue(System.Boolean)">
            <summary>
            Call to allow or deny geolocation access.
            </summary>
            <param name="allow">true to allow</param>
        </member>
        <member name="P:CefSharp.IGeolocationCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="P:CefSharp.IJavascriptCallback.CanExecute">
            <summary>
            Check to see if the underlying resource are still available to execute the callback
            </summary>
        </member>
        <member name="P:CefSharp.IJavascriptCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="M:CefSharp.IJsDialogCallback.Continue(System.Boolean,System.String)">
            <summary>
            Continue the Javascript dialog request.
            </summary>
            <param name="success">Set to true if the OK button was pressed.</param>
            <param name="userInput">value should be specified for prompt dialogs.</param>
        </member>
        <member name="M:CefSharp.IJsDialogCallback.Continue(System.Boolean)">
            <summary>
            Continue the Javascript dialog request.
            </summary>
            <param name="success">Set to true if the OK button was pressed.</param>
        </member>
        <member name="P:CefSharp.IJsDialogCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.Internals.IBrowserAdapter">
            <summary>
            Interface used to break reference cycles in CefSharp.Core C++ code.
            This will ALWAYS be a ManagedCefBrowserAdapter instance.
            </summary>
        </member>
        <member name="T:CefSharp.CefCursorType">
            <summary>
            Cursor type values.
            </summary>
        </member>
        <member name="T:CefSharp.Internals.IJavascriptCallbackFactory">
            <summary>
            Interface to convert a JavascriptCallback dto to a callable implementation.
            </summary>
        </member>
        <member name="M:CefSharp.Internals.IntPtrExtensions.CastToInt32(System.IntPtr)">
            <summary>
            Do an unchecked conversion from IntPtr to int
            so overflow exceptions don't get thrown.
            </summary>
            <param name="intPtr">the IntPtr to cast</param>
            <returns>a 32-bit signed integer</returns>
        </member>
        <member name="T:CefSharp.Internals.PendingTaskRepository`1">
            <summary>
            Class to store TaskCompletionSources indexed by a unique id.
            </summary>
            <typeparam name="TResult">The type of the result produced by the tasks held.</typeparam>
        </member>
        <member name="M:CefSharp.Internals.PendingTaskRepository`1.CreatePendingTask(System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new pending task with a timeout.
            </summary>
            <param name="timeout">The maximum running time of the task.</param>
            <returns>The unique id of the newly created pending task and the newly created <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.</returns>
        </member>
        <member name="M:CefSharp.Internals.PendingTaskRepository`1.RemovePendingTask(System.Int64)">
            <summary>
            Gets and removed pending task by id.
            </summary>
            <param name="id">Unique id of the pending task.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> associated with the given id.
            </returns>
        </member>
        <member name="T:CefSharp.IDisplayHandler">
            <summary>
            Handle events related to browser display state.
            </summary>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnAddressChanged(CefSharp.IWebBrowser,CefSharp.AddressChangedEventArgs)">
            <summary>
            Called when a frame's address has changed. 
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="addressChangedArgs">args</param>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnTitleChanged(CefSharp.IWebBrowser,CefSharp.TitleChangedEventArgs)">
            <summary>
            Called when the page title changes.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="titleChangedArgs">args</param>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnFaviconUrlChange(CefSharp.IWebBrowser,CefSharp.IBrowser,System.Collections.Generic.IList{System.String})">
            <summary>
            Called when the page icon changes.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="urls">list of urls where the favicons can be downloaded</param>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnFullscreenModeChange(CefSharp.IWebBrowser,CefSharp.IBrowser,System.Boolean)">
            <summary>
            Called when web content in the page has toggled fullscreen mode. The client is
            responsible for resizing the browser if desired.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="fullscreen">If true the content will automatically be sized to fill the browser content area.
            If false the content will automatically return to its original size and position.</param>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnTooltipChanged(CefSharp.IWebBrowser,System.String)">
            <summary>
            Called when the browser is about to display a tooltip. text contains the
            text that will be displayed in the tooltip. You can optionally modify text
            and then return false to allow the browser to display the tooltip.
            When window rendering is disabled the application is responsible for
            drawing tooltips and the return value is ignored.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="text">the text that will be displayed in the tooltip</param>
            <returns>To handle the display of the tooltip yourself return true otherwise return false
            to allow the browser to display the tooltip.</returns>
            <remarks>Option to modify tooltip is not currently implemented.</remarks>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnStatusMessage(CefSharp.IWebBrowser,CefSharp.StatusMessageEventArgs)">
            <summary>
            Called when the browser receives a status message.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this popup is related to.</param>
            <param name="statusMessageArgs">args</param>
        </member>
        <member name="M:CefSharp.IDisplayHandler.OnConsoleMessage(CefSharp.IWebBrowser,CefSharp.ConsoleMessageEventArgs)">
            <summary>
            Called to display a console message. 
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="consoleMessageArgs">args</param>
            <returns>Return true to stop the message from being output to the console.</returns>
        </member>
        <member name="M:CefSharp.IRequestCallback.Continue(System.Boolean)">
            <summary>
            Continue the url request. 
            </summary>
            <param name="allow">If is true the request will be continued, otherwise, the request will be canceled.</param>
        </member>
        <member name="M:CefSharp.IRequestCallback.Cancel">
            <summary>
            Cancel the url request.
            </summary>
        </member>
        <member name="P:CefSharp.IRequestCallback.IsDisposed">
            <summary>
            Gets a value indicating whether the callback has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.IResourceHandler">
            <summary>
            Class used to implement a custom resource handler. The methods of this class will always be called on the CEF IO thread.
            Blocking the CEF IO thread will adversely affect browser performance. We suggest you execute your code in a Task (or similar).
            To implement async handling, spawn a new Task (or similar), keep a reference to the callback. When you have a 
            fully populated stream, execute the callback. Once the callback Executes, GetResponseHeaders will be called where you
            can modify the response including headers, or even redirect to a new Url. Set your responseLength and headers
            Populate the dataOut stream in ReadResponse. For those looking for a sample implementation or upgrading from 
            a previous version <see cref="T:CefSharp.ResourceHandler"/>. For those upgrading, inherit from ResourceHandler instead of IResourceHandler
            add the override keywoard to existing methods e.g. ProcessRequestAsync.
            </summary>
        </member>
        <member name="M:CefSharp.IResourceHandler.ProcessRequest(CefSharp.IRequest,CefSharp.ICallback)">
            <summary>
            Begin processing the request.  
            </summary>
            <param name="request">The request object.</param>
            <param name="callback">The callback used to Continue or Cancel the request (async).</param>
            <returns>To handle the request return true and call
            <see cref="M:CefSharp.ICallback.Continue"/> once the response header information is available
            <see cref="M:CefSharp.ICallback.Continue"/> can also be called from inside this method if
            header information is available immediately).
            To cancel the request return false.</returns>
        </member>
        <member name="M:CefSharp.IResourceHandler.GetResponseHeaders(CefSharp.IResponse,System.Int64@,System.String@)">
            <summary>
            Retrieve response header information. If the response length is not known
            set responseLength to -1 and ReadResponse() will be called until it
            returns false. If the response length is known set responseLength
            to a positive value and ReadResponse() will be called until it returns
            false or the specified number of bytes have been read.  
            </summary>
            <param name="response">Use the response object to set the mime type, http status code and other optional header values.</param>
            <param name="responseLength">If the response length is not known set responseLength to -1</param>
            <param name="redirectUrl">To redirect the request to a new URL set redirectUrl to the new Url.</param>
        </member>
        <member name="M:CefSharp.IResourceHandler.ReadResponse(System.IO.Stream,System.Int32@,CefSharp.ICallback)">
            <summary>
            Read response data. If data is available immediately copy to
            dataOut, set bytesRead to the number of bytes copied, and return true.
            To read the data at a later time set bytesRead to 0, return true and call ICallback.Continue() when the
            data is available. To indicate response completion return false.
            </summary>
            <param name="dataOut">Stream to write to</param>
            <param name="bytesRead">Number of bytes copied to the stream</param>
            <param name="callback">The callback used to Continue or Cancel the request (async).</param>
            <returns>If data is available immediately copy to dataOut, set bytesRead to the number of bytes copied,
            and return true.To indicate response completion return false.</returns>
            <remarks>Depending on this size of your response this method may be called multiple times</remarks>
        </member>
        <member name="M:CefSharp.IResourceHandler.CanGetCookie(CefSharp.Cookie)">
            <summary>
            Return true if the specified cookie can be sent with the request or false
            otherwise. If false is returned for any cookie then no cookies will be sent
            with the request.
            </summary>
            <param name="cookie">cookie</param>
            <returns>Return true if the specified cookie can be sent with the request or false
            otherwise. If false is returned for any cookie then no cookies will be sent
            with the request.</returns>
        </member>
        <member name="M:CefSharp.IResourceHandler.CanSetCookie(CefSharp.Cookie)">
            <summary>
            Return true if the specified cookie returned with the response can be set or false otherwise.
            </summary>
            <param name="cookie">cookie</param>
            <returns>Return true if the specified cookie returned with the response can be set or false otherwise.</returns>
        </member>
        <member name="M:CefSharp.IResourceHandler.Cancel">
            <summary>
            Request processing has been canceled.
            </summary>
        </member>
        <member name="P:CefSharp.IResponse.MimeType">
            <summary>
            MimeType
            </summary>
        </member>
        <member name="P:CefSharp.IResponse.ResponseHeaders">
            <summary>
            Response Headers
            </summary>
        </member>
        <member name="P:CefSharp.IResponse.StatusCode">
            <summary>
            The status code of the response. Unless set, the default value used is 200
            (corresponding to HTTP status OK).
            </summary>
        </member>
        <member name="P:CefSharp.IResponse.StatusText">
            <summary>
            Status Text
            </summary>
        </member>
        <member name="M:CefSharp.IWindowInfo.SetAsWindowless(System.IntPtr,System.Boolean)">
            <summary>
            Create the browser using windowless (off-screen) rendering.
            No window will be created for the browser and all rendering will occur via the CefRenderHandler interface.
            </summary>
            <param name="parentHandle">Value will be used to identify monitor info and to act as the parent window for dialogs, context menus, etc.
            If not provided then the main screen monitor will be used and some functionality that requires a parent window may not function correctly.</param>
            <param name="transparent">If is true a transparent background color will be used (RGBA=0x00000000). 
            If is false the background will be white and opaque. 
            In order to create windowless browsers the CefSettings.windowless_rendering_enabled value must be set to true.</param>
        </member>
        <member name="T:CefSharp.MouseEvent">
            <summary>
            Class representing a mouse event.
            </summary>
        </member>
        <member name="P:CefSharp.MouseEvent.X">
            <summary>
            X coordinate relative to the left side of the view.
            </summary>
        </member>
        <member name="P:CefSharp.MouseEvent.Y">
            <summary>
            Y coordinate relative to the top side of the view.
            </summary>
        </member>
        <member name="P:CefSharp.MouseEvent.Modifiers">
            <summary>
            Bit flags describing any pressed modifier keys.
            </summary>
        </member>
        <member name="T:CefSharp.DragOperationsMask">
            <summary>
            "Verb" of a drag-and-drop operation as negotiated between the source and destination.
            </summary>
        </member>
        <member name="T:CefSharp.IDragData">
            <summary>
            Used to represent drag data.
            </summary>
        </member>
        <member name="M:CefSharp.IDragData.AddFile(System.String,System.String)">
            <summary>
            Add a file that is being dragged into the webview.
            </summary>
            <param name="path">File Path</param>
            <param name="displayName">Optional Display Name</param>
        </member>
        <member name="M:CefSharp.IDragData.ResetFileContents">
            <summary>
            Reset the file contents. You should do this before calling
            CefBrowserHost::DragTargetDragEnter as the web view does not allow us to
            drag in this kind of data.
            </summary>
        </member>
        <member name="M:CefSharp.IDragData.GetFileContents">
            <summary>
            Gets the contents of the File as a <see cref="T:System.IO.Stream"/>
            For a suggested filename check the <see cref="P:CefSharp.IDragData.FileName"/> property
            </summary>
            <returns>the contents of the file</returns>
        </member>
        <member name="P:CefSharp.IDragData.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.FileName">
            <summary>
            Return the name of the file being dragged out of the browser window.
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.FileNames">
            <summary>
            Retrieve the list of file names that are being dragged into the browser window
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.FragmentBaseUrl">
            <summary>
            Return the base URL that the fragment came from. This value is used for resolving relative URLs and may be empty. 
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.FragmentHtml">
            <summary>
            Return the text/html fragment that is being dragged. 
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.FragmentText">
            <summary>
            Return the plain text fragment that is being dragged.
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.LinkMetaData">
            <summary>
            Return the metadata, if any, associated with the link being dragged. 
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.LinkTitle">
            <summary>
            Return the title associated with the link being dragged.
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.LinkUrl">
            <summary>
            Return the link URL that is being dragged. 
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.IsFile">
            <summary>
            Returns true if the drag data is a file.
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.IsFragment">
            <summary>
            Returns true if the drag data is a text or html fragment.
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.IsLink">
            <summary>
            Returns true if the drag data is a link
            </summary>
        </member>
        <member name="P:CefSharp.IDragData.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed of.
            </summary>
        </member>
        <member name="M:CefSharp.IFocusHandler.OnGotFocus">
            <summary>
            Called when the browser component has received focus.
            </summary>
        </member>
        <member name="M:CefSharp.IFocusHandler.OnSetFocus(CefSharp.CefFocusSource)">
            <summary>
            Called when the browser component is requesting focus.
            </summary>
            <param name="source">Indicates where the focus request is originating from.</param>
            <returns>Return false to allow the focus to be set or true to cancel setting the focus.</returns>
        </member>
        <member name="M:CefSharp.IFocusHandler.OnTakeFocus(System.Boolean)">
            <summary>
            Called when the browser component is about to lose focus.
            For instance, if focus was on the last HTML element and the user pressed the TAB key.
            </summary>
            <param name="next">Will be true if the browser is giving focus to the next component
            and false if the browser is giving focus to the previous component.</param>
        </member>
        <member name="T:CefSharp.IDragHandler">
            <summary>
            Implement this interface to handle events related to dragging.
            The methods of this class will be called on the UI thread. 
            </summary>
        </member>
        <member name="M:CefSharp.IDragHandler.OnDragEnter(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IDragData,CefSharp.DragOperationsMask)">
            <summary>
            Called when an external drag event enters the browser window.
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="dragData">contains the drag event data</param>
            <param name="mask">represents the type of drag operation</param>
            <returns>Return false for default drag handling behavior or true to cancel the drag event. </returns>
        </member>
        <member name="M:CefSharp.IDragHandler.OnDraggableRegionsChanged(CefSharp.IWebBrowser,CefSharp.IBrowser,System.Collections.Generic.IList{CefSharp.DraggableRegion})">
            <summary>
            Called whenever draggable regions for the browser window change.
            These can be specified using the '-webkit-app-region: drag/no-drag' CSS-property.
            If draggable regions are never defined in a document this method will also never be called.
            If the last draggable region is removed from a document this method will be called with an empty IList. 
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="regions">List of <see cref="T:CefSharp.DraggableRegion"/> objects or null if last region was removed.</param>
        </member>
        <member name="T:CefSharp.IGeolocationHandler">
            <summary>
            Implement this interface to handle events related to geolocation permission requests.
            The methods of this class will be called on the CEF UI thread. 
            </summary>
        </member>
        <member name="M:CefSharp.IGeolocationHandler.OnRequestGeolocationPermission(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String,System.Int32,CefSharp.IGeolocationCallback)">
            <summary>
            Called when a page requests permission to access geolocation information.
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
            <param name="requestingUrl">the URL requesting permission</param>
            <param name="requestId">the unique ID for the permission request</param>
            <param name="callback">Callback interface used for asynchronous continuation of geolocation permission requests.</param>
            <returns>true to allow the request and false to deny</returns>
        </member>
        <member name="M:CefSharp.IGeolocationHandler.OnCancelGeolocationPermission(CefSharp.IWebBrowser,CefSharp.IBrowser,System.Int32)">
            <summary>
            Called when a geolocation access request is canceled.
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
            <param name="requestId">the unique ID for the permission request, as seen in <see cref="M:CefSharp.IGeolocationHandler.OnRequestGeolocationPermission(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String,System.Int32,CefSharp.IGeolocationCallback)"/></param>
        </member>
        <member name="T:CefSharp.IsBrowserInitializedChangedEventArgs">
            <summary>
            Event arguments to the IsBrowserInitializedChanged event handler.
            </summary>
        </member>
        <member name="T:CefSharp.CefTerminationStatus">
            <summary>
            Process termination status values. 
            </summary>
        </member>
        <member name="F:CefSharp.CefTerminationStatus.AbnormalTermination">
            <summary>
            Non-zero exit status.
            </summary>
        </member>
        <member name="F:CefSharp.CefTerminationStatus.ProcessWasKilled">
            <summary>
            SIGKILL or task manager kill.
            </summary>
        </member>
        <member name="F:CefSharp.CefTerminationStatus.ProcessCrashed">
            <summary>
            Segmentation fault.
            </summary>
        </member>
        <member name="T:CefSharp.IDialogHandler">
            <summary>
            Implement this interface to handle dialog events. The methods of this class will be called on the CEF UI thread.
            </summary>
        </member>
        <member name="M:CefSharp.IDialogHandler.OnFileDialog(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.CefFileDialogMode,System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,CefSharp.IFileDialogCallback)">
            <summary>
            Runs a file chooser dialog. 
            </summary>
            <example>
            To test assign something like TempFileDialogHandler (from CefSharp.Example) to DialogHandler e.g.
            <code>
            browser.DialogHandler = new TempFileDialogHandler();
            </code>
            Example URL to use for file browsing http://www.cs.tut.fi/~jkorpela/forms/file.html#example
            Simply click browse, the space next to the browse button should be populated with a randomly generated filename.
            </example>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
            <param name="mode">represents the type of dialog to display</param>
            <param name="title">the title to be used for the dialog. It may be empty to show the default title ("Open" or "Save" 
            depending on the mode).</param>
            <param name="defaultFilePath">is the path with optional directory and/or file name component that
            should be initially selected in the dialog.</param>
            <param name="acceptFilters">are used to restrict the selectable file types and may any combination of
            (a) valid lower-cased MIME types (e.g. "text/*" or "image/*"),
            (b) individual file extensions (e.g. ".txt" or ".png"),
            (c) combined description and file extension delimited using "|" and ";" (e.g. "Image Types|.png;.gif;.jpg").</param>
            <param name="selectedAcceptFilter">is the 0-based index of the filter that should be selected by default.</param>
            <param name="callback">Callback interface for asynchronous continuation of file dialog requests.</param>
            <returns>To display a custom dialog return true. To display the default dialog return false.</returns>
        </member>
        <member name="T:CefSharp.AddressChangedEventArgs">
            <summary>
            Event arguments to the AddressChanged event handler.
            </summary>
        </member>
        <member name="M:CefSharp.AddressChangedEventArgs.#ctor(CefSharp.IBrowser,System.String)">
            <summary>
            Called when a frame's address has changed. 
            </summary>
            <param name="browser">the browser object</param>
            <param name="address">the address</param>
        </member>
        <member name="P:CefSharp.DownloadItem.IsValid">
            <summary>
            Returns true if this object is valid. Do not call any other methods if this function returns false.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.IsInProgress">
            <summary>
            Returns true if the download is in progress.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.IsComplete">
            <summary>
            Returns true if the download is complete.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.IsCancelled">
            <summary>
            Returns true if the download has been canceled or interrupted.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.CurrentSpeed">
            <summary>
            Returns a simple speed estimate in bytes/s.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.PercentComplete">
            <summary>
            Returns the rough percent complete or -1 if the receive total size is unknown.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.TotalBytes">
            <summary>
            Returns the total number of bytes.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.ReceivedBytes">
            <summary>
            Returns the number of received bytes.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.StartTime">
            <summary>
            Returns the time that the download started
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.EndTime">
            <summary>
            Returns the time that the download ended
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.FullPath">
            <summary>
            Returns the full path to the downloaded or downloading file.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.Id">
            <summary>
            Returns the unique identifier for this download.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.Url">
            <summary>
            Returns the URL.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.SuggestedFileName">
            <summary>
            Returns the suggested file name.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.ContentDisposition">
            <summary>
            Returns the content disposition.
            </summary>
        </member>
        <member name="P:CefSharp.DownloadItem.MimeType">
            <summary>
            Returns the mime type.
            </summary>
        </member>
        <member name="T:CefSharp.CefEventFlags">
            <summary>
            Supported event bit flags.
            </summary>
        </member>
        <member name="F:CefSharp.CefEventFlags.CommandDown">
            <summary>
            Mac OS-X command key.
            </summary>
        </member>
        <member name="T:CefSharp.Internals.TaskExtensions">
            <summary>
            TaskExtension based on the following
            https://github.com/ChadBurggraf/parallel-extensions-extras/blob/master/Extensions/TaskExtrasExtensions.cs
            https://github.com/ChadBurggraf/parallel-extensions-extras/blob/ec803e58eee28c698e44f55f49c5ad6671b1aa58/Extensions/TaskCompletionSourceExtensions.cs
            </summary>
        </member>
        <member name="M:CefSharp.Internals.TaskExtensions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.</summary>
            <typeparam name="TResult">Specifies the type of data contained in the task.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:CefSharp.Internals.TaskExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="M:CefSharp.Internals.TaskExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="T:CefSharp.IStringVisitor">
            <summary>
            Implement this interface to receive string values asynchronously.
            </summary>
        </member>
        <member name="T:CefSharp.IContextMenuParams">
            <summary>
            Wrapper for the CefContextMenuParams
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.YCoord">
            <summary>
            Returns the Y coordinate of the mouse where the context menu was invoked.
            Coords are relative to the associated RenderView's origin.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.XCoord">
            <summary>
            Returns the X coordinate of the mouse where the context menu was invoked.
            Coords are relative to the associated RenderView's origin.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.TypeFlags">
            <summary>
            Returns flags representing the type of node that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.LinkUrl">
            <summary>
            Returns the URL of the link, if any, that encloses the node that the
            context menu was invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.UnfilteredLinkUrl">
            <summary>
            Returns the link URL, if any, to be used ONLY for "copy link address". We
            don't validate this field in the frontend process.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.SourceUrl">
            <summary>
            Returns the source URL, if any, for the element that the context menu was
            invoked on. Example of elements with source URLs are img, audio, and video.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.HasImageContents">
            <summary>
            Returns true if the context menu was invoked on an image which has
            non-empty contents.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.PageUrl">
            <summary>
            Returns the URL of the top level page that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.FrameUrl">
            <summary>
            Returns the URL of the subframe that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.FrameCharset">
            <summary>
            Returns the character encoding of the subframe that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.MediaType">
            <summary>
            Returns the type of context node that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.MediaStateFlags">
            <summary>
            Returns flags representing the actions supported by the media element, if
            any, that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.SelectionText">
            <summary>
            Returns the text of the selection, if any, that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.MisspelledWord">
            <summary>
            Returns the text of the misspelled word, if any, that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.DictionarySuggestions">
            <summary>
            Returns a list of strings from the spell check service for the misspelled word if there is one.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.IsEditable">
            <summary>
            Returns true if the context menu was invoked on an editable node.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.IsSpellCheckEnabled">
            <summary>
            Returns true if the context menu was invoked on an editable node where
            spell-check is enabled.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.EditStateFlags">
            <summary>
            Returns flags representing the actions supported by the editable node, if
            any, that the context menu was invoked on.
            </summary>
            <returns>Returns ContextMenuEditState as flags</returns>
        </member>
        <member name="P:CefSharp.IContextMenuParams.IsCustomMenu">
            <summary>
            Returns true if the context menu contains items specified by the renderer
            process (for example, plugin placeholder or pepper plugin menu items).
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.IsPepperMenu">
            <summary>
            Returns true if the context menu was invoked from a pepper plugin.
            </summary>
        </member>
        <member name="P:CefSharp.IContextMenuParams.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed of.
            </summary>
        </member>
        <member name="T:CefSharp.JavascriptIgnoreAttribute">
            <summary>
            JavascriptIgnoreAttribute - Methods and Properties marked with this attribute
            will be excluded from Javascript Binding
            </summary>
        </member>
        <member name="T:CefSharp.LoadErrorEventArgs">
            <summary>
            Event arguments to the LoadError event handler set up in IWebBrowser.
            </summary>
        </member>
        <member name="P:CefSharp.LoadErrorEventArgs.Browser">
            <summary>
            The browser object
            </summary>
        </member>
        <member name="P:CefSharp.LoadErrorEventArgs.Frame">
            <summary>
            The frame that failed to load.
            </summary>
        </member>
        <member name="P:CefSharp.LoadErrorEventArgs.FailedUrl">
            <summary>
            The URL that failed to load.
            </summary>
        </member>
        <member name="P:CefSharp.LoadErrorEventArgs.ErrorCode">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="P:CefSharp.LoadErrorEventArgs.ErrorText">
            <summary>
            The error text.
            </summary>
        </member>
        <member name="T:CefSharp.FrameLoadStartEventArgs">
            <summary>
            Event arguments to the FrameLoadStart event handler set up in IWebBrowser.
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadStartEventArgs.Browser">
            <summary>
            The browser object
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadStartEventArgs.Frame">
            <summary>
            The frame that just started loading.
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadStartEventArgs.Url">
            <summary>
            The URL that was loaded.
            </summary>
        </member>
        <member name="T:CefSharp.PaintElementType">
            <summary>
            Paint element types.
            </summary>
        </member>
        <member name="T:CefSharp.PluginPolicy">
            <summary>
            Plugin policies supported by IPluginHandler.OnBeforePluginLoad.
            </summary>
        </member>
        <member name="F:CefSharp.PluginPolicy.Allow">
            <summary>
            Allow the content
            </summary>
        </member>
        <member name="F:CefSharp.PluginPolicy.DetectImportant">
            <summary>
            Allow important content and block unimportant content based on heuristics. The user can manually load blocked content.
            </summary>
        </member>
        <member name="F:CefSharp.PluginPolicy.Block">
            <summary>
            Block the content. The user can manually load blocked content.
            </summary>
        </member>
        <member name="F:CefSharp.PluginPolicy.Disable">
            <summary>
            Disable the content. The user cannot load disabled content.
            </summary>
        </member>
        <member name="T:CefSharp.PostDataElementType">
            <summary>
            Post data elements may represent either bytes or files.
            </summary>
        </member>
        <member name="M:CefSharp.PostDataExtensions.GetCharSet(CefSharp.IRequest)">
            <summary>
            A convenience extension method that extracts the Character set from
            the content-type header. Can be used in conjuncation with <see cref="M:CefSharp.PostDataExtensions.GetBody(CefSharp.IPostDataElement,System.String)"/>
            </summary>
            <param name="request">the request</param>
            <returns>character set e.g. UTF-8</returns>
        </member>
        <member name="M:CefSharp.PostDataExtensions.GetBody(CefSharp.IPostDataElement,System.String)">
            <summary>
            Converts the <see cref="P:CefSharp.IPostDataElement.Bytes"/> property into a string
            using the specified charset (Encoding) or if unable to parse then uses
            the <see cref="P:System.Text.Encoding.Default"/>
            </summary>
            <param name="postDataElement">post data</param>
            <param name="charSet">character set</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:CefSharp.PostDataExtensions.AddFile(CefSharp.IPostData,System.String)">
            <summary>
            Add a new <see cref="T:CefSharp.IPostDataElement"/> that represents the specified file
            </summary>
            <param name="postData">post data instance</param>
            <param name="fileName">file name</param>
        </member>
        <member name="M:CefSharp.PostDataExtensions.AddData(CefSharp.IPostData,System.String,System.Text.Encoding)">
            <summary>
            Add a new <see cref="T:CefSharp.IPostDataElement"/> that represents the key and value
            The data is encoded using
            </summary>
            <param name="postData">Post Data</param>
            <param name="data">Data to be encoded for the post data element</param>
            <param name="encoding">Specified Encoding. If null then <see cref="P:System.Text.Encoding.Default"/> will be used</param>
        </member>
        <member name="T:CefSharp.Rect">
            <summary>
            Represents a rectangle
            </summary>
        </member>
        <member name="F:CefSharp.ReferrerPolicy.Always">
            <summary>
            Always send the complete Referrer value.
            </summary>
        </member>
        <member name="F:CefSharp.ReferrerPolicy.Default">
            <summary>
            Use the default policy. This is OriginWhenCrossOrigin
            when the `--reduced-referrer-granularity` command-line flag is specified
            and NoReferrerWhenDowngrade otherwise.
            </summary>
        </member>
        <member name="F:CefSharp.ReferrerPolicy.NoReferrerWhenDowngrade">
            <summary>
            When navigating from HTTPS to HTTP do not send the Referrer value.
            Otherwise, send the complete Referrer value.
            </summary>
        </member>
        <member name="F:CefSharp.ReferrerPolicy.Never">
            <summary>
            Never send the Referrer value.
            </summary>
        </member>
        <member name="F:CefSharp.ReferrerPolicy.Origin">
            <summary>
            Only send the origin component of the Referrer value.
            </summary>
        </member>
        <member name="F:CefSharp.ReferrerPolicy.OriginWhenCrossOrigin">
            <summary>
            When navigating cross-origin only send the origin component of the Referrer value. Otherwise, send the complete Referrer value.
            </summary>
        </member>
        <member name="P:CefSharp.ResolveCallbackResult.Result">
            <summary>
            The result code - <see cref="F:CefSharp.CefErrorCode.None"/> on success
            </summary>
        </member>
        <member name="P:CefSharp.ResolveCallbackResult.ResolvedIpAddresses">
            <summary>
            List of resolved IP addresses or empty if the resolution failed.
            </summary>
        </member>
        <member name="T:CefSharp.ResourceHandler">
            <summary>
            Class ResourceHandler.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceHandler.DefaultMimeType">
            <summary>
            MimeType to be used if none provided
            </summary>
        </member>
        <member name="M:CefSharp.ResourceHandler.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CefSharp.ResourceHandler.#ctor(System.String,CefSharp.ResourceHandlerType)">
            <summary>
            Initializes a new instance of the <see cref="T:CefSharp.ResourceHandler"/> class.
            </summary>
        </member>
        <member name="M:CefSharp.ResourceHandler.FromFileName(System.String,System.String)">
            <summary>
            Gets the resource from the file.
            </summary>
            <param name="fileName">Location of the file.</param>
            <param name="fileExtension">The file extension.</param>
            <returns>ResourceHandler.</returns>
        </member>
        <member name="M:CefSharp.ResourceHandler.FromString(System.String,System.String)">
            <summary>
            Gets the resource from the string.
            </summary>
            <param name="text">The text.</param>
            <param name="fileExtension">The file extension.</param>
            <returns>ResourceHandler.</returns>
        </member>
        <member name="M:CefSharp.ResourceHandler.FromString(System.String,System.Text.Encoding,System.Boolean,System.String)">
            <summary>
            Gets a <see cref="T:CefSharp.ResourceHandler"/> that represents a string.
            Without a Preamble, Cef will use BrowserSettings.DefaultEncoding to load the html.
            </summary>
            <param name="text">The html string</param>
            <param name="encoding">Character Encoding</param>
            <param name="includePreamble">Include encoding preamble</param>
            <param name="mimeType">Mime Type</param>
            <returns>ResourceHandler</returns>
        </member>
        <member name="M:CefSharp.ResourceHandler.FromStream(System.IO.Stream,System.String)">
            <summary>
            Gets the resource from a stream.
            </summary>
            <param name="stream">A stream of the resource.</param>
            <param name="mimeType">Type of MIME.</param>
            <returns>ResourceHandler.</returns>
        </member>
        <member name="M:CefSharp.ResourceHandler.GetMimeType(System.String)">
            <summary>
            Gets the MIME type of the content.
            </summary>
            <param name="extension">The extension.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">extension</exception>
        </member>
        <member name="P:CefSharp.ResourceHandler.FilePath">
            <summary>
            Path of the underlying file
            </summary>
        </member>
        <member name="P:CefSharp.ResourceHandler.MimeType">
            <summary>
            Gets or sets the Mime Type.
            </summary>
            <value>The Mime Type.</value>
        </member>
        <member name="P:CefSharp.ResourceHandler.Stream">
            <summary>
            Gets or sets the resource stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:CefSharp.ResourceHandler.StatusCode">
            <summary>
            Gets or sets the http status code.
            </summary>
            <value>The http status code.</value>
        </member>
        <member name="P:CefSharp.ResourceHandler.StatusText">
            <summary>
            Gets or sets the status text.
            </summary>
            <value>The status text.</value>
        </member>
        <member name="P:CefSharp.ResourceHandler.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:CefSharp.ResourceHandler.Type">
            <summary>
            Specify which type of resource handle represnets
            </summary>
        </member>
        <member name="F:CefSharp.ResourceHandlerType.Stream">
            <summary>
            Resource is read from a Stream (Default)
            </summary>
        </member>
        <member name="F:CefSharp.ResourceHandlerType.File">
            <summary>
            Resource is read from a file on disk
            </summary>
        </member>
        <member name="T:CefSharp.ResourceType">
            <summary>
            Resource type for a request.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.MainFrame">
            <summary>
            Top level page.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.SubFrame">
            <summary>
            Frame or iframe.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Stylesheet">
            <summary>
            CSS stylesheet.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Script">
            <summary>
            External script.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Image">
            <summary>
            Image (jpg/gif/png/etc).
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.FontResource">
            <summary>
            Font.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.SubResource">
            <summary>
            Some other subresource. This is the default type if the actual type is unknown.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Object">
            <summary>
            Object (or embed) tag for a plugin, or a resource that a plugin requested.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Media">
            <summary>
            Media resource.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Worker">
            <summary>
            Main resource of a dedicated worker.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.SharedWorker">
            <summary>
            Main resource of a shared worker.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Prefetch">
            <summary>
            Explicitly requested prefetch.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Favicon">
            <summary>
            Favicon.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Xhr">
            <summary>
            XMLHttpRequest.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.Ping">
            <summary>
            A request for a ping
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.ServiceWorker">
            <summary>
            Main resource of a service worker.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.CspReport">
            <summary>
            A report of Content Security Policy violations.
            </summary>
        </member>
        <member name="F:CefSharp.ResourceType.PluginResource">
            <summary>
            A resource that a plugin requested.
            </summary>
        </member>
        <member name="T:CefSharp.ICompletionCallback">
            <summary>
            Generic callback interface used for asynchronous completion. 
            </summary>
        </member>
        <member name="M:CefSharp.ICompletionCallback.OnComplete">
            <summary>
            Method that will be called once the task is complete. 
            </summary>
        </member>
        <member name="T:CefSharp.TransitionType">
            <summary>
            Transition type for a request. Made up of one source value and 0 or more qualifiers.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.LinkClicked">
            <summary>
            Source is a link click or the JavaScript window.open function. This is
            also the default value for requests like sub-resource loads that are not navigations.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.Explicit">
            <summary>
            Source is some other "explicit" navigation action such as creating a new 
            browser or using the LoadURL function. This is also the default value
            for navigations where the actual type is unknown.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.AutoSubFrame">
            <summary>
            Source is a subframe navigation. This is any content that is automatically
            loaded in a non-toplevel frame. For example, if a page consists of several
            frames containing ads, those ad URLs will have this transition type.
            The user may not even realize the content in these pages is a separate
            frame, so may not care about the URL.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.ManualSubFrame">
            <summary>
            Source is a subframe navigation explicitly requested by the user that will
            generate new navigation entries in the back/forward list. These are
            probably more important than frames that were automatically loaded in
            the background because the user probably cares about the fact that this
            link was loaded.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.FormSubmit">
            <summary>
            Source is a form submission by the user. NOTE: In some situations
            submitting a form does not result in this transition type. This can happen
            if the form uses a script to submit the contents.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.Reload">
            <summary>
            Source is a "reload" of the page via the Reload function or by re-visiting
            the same URL. NOTE: This is distinct from the concept of whether a
            particular load uses "reload semantics" (i.e. bypasses cached data).
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.SourceMask">
            <summary>
            General mask defining the bits used for the source values.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.Blocked">
            <summary>
            Attempted to visit a URL but was blocked.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.ForwardBack">
            <summary>
            Used the Forward or Back function to navigate among browsing history.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.ChainStart">
            <summary>
            The beginning of a navigation chain.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.ChainEnd">
            <summary>
            The last transition in a redirect chain.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.CliendRedirect">
            <summary>
            Redirects caused by JavaScript or a meta refresh tag on the page.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.ServerRedirect">
            <summary>
            Redirects sent from the server by HTTP headers.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.IsRedirect">
            <summary>
            Used to test whether a transition involves a redirect.
            </summary>
        </member>
        <member name="F:CefSharp.TransitionType.QualifierMask">
            <summary>
            General mask defining the bits used for the qualifiers.
            </summary>
        </member>
        <member name="T:CefSharp.LoadingStateChangedEventArgs">
            <summary>
            Event arguments to the LoadingStateChanged event handler set up in IWebBrowser.
            </summary>
        </member>
        <member name="T:CefSharp.CefFocusSource">
            <summary>
            Focus Source
            </summary>
        </member>
        <member name="F:CefSharp.CefFocusSource.FocusSourceNavigation">
            <summary>
            The source is explicit navigation via the API (LoadURL(), etc).
            </summary>
        </member>
        <member name="F:CefSharp.CefFocusSource.FocusSourceSystem">
            <summary>
            The source is a system-generated focus event.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptMethod.Function">
            <summary>
            Gets or sets a delegate which is used to invoke the method if the member is a method. 
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptMethod.Id">
            <summary>
            Identifies the <see cref="T:CefSharp.Internals.JavascriptMethod"/> for BrowserProcess to RenderProcess communication
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptMethod.ManagedName">
            <summary>
            Gets or sets the name of the managed property.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptMethod.JavascriptName">
            <summary>
            Gets or sets the name of the property in the JavaScript runtime.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptMethod.Parameters">
            <summary>
            Params this method expects
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptMethod.ParameterCount">
            <summary>
            Number of Params this function exepects
            </summary>
        </member>
        <member name="T:CefSharp.Internals.JavascriptObject">
            <summary>
            This maps the registered objects in the browser process
            to the reflection data necessary to update the objects,
            and mapping information to how the object/method/proprerty
            will be exposed to JavaScript.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptObject.Id">
            <summary>
            Identifies the <see cref="T:CefSharp.Internals.JavascriptObject"/> for BrowserProcess to RenderProcess communication
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptObject.CamelCaseJavascriptNames">
            <summary>
            Indicate if JavascriptName is camel case or not
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptObject.Methods">
            <summary>
            Gets the methods of the <see cref="T:CefSharp.Internals.JavascriptObject"/>.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptObject.Properties">
            <summary>
            Gets the properties of the <see cref="T:CefSharp.Internals.JavascriptObject"/>.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptObject.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:CefSharp.Internals.JavascriptObjectRepository">
            <summary>
            This class manages the registration of objects in the browser
            process to be exposed to JavaScript in the renderer process.
            Registration performs method, parameter, property type analysis
            of the registered objects into meta-data tied to reflection data 
            for later use.
            
            This class also is the adaptation layer between the BrowserProcessService
            and the registered objects. This means when the renderer wants to call an 
            exposed method, get a property of an object, or
            set a property of an object in the browser process, that this
            class does deals with the previously created meta-data and invokes the correct
            behavior via reflection APIs.
            
            All of the registered objects are tracked via meta-data for the objects 
            expressed starting with the JavaScriptObject type.
            </summary>
        </member>
        <member name="T:CefSharp.DisposableResource">
            <summary>
            Provides base class functionality for implementing the Dispose Pattern.
            </summary>
        </member>
        <member name="M:CefSharp.DisposableResource.DisposeGuard">
            <summary>
            If this Object is disposed the Method will throw a <see cref="T:System.ObjectDisposedException"/>.
            Use this method to guard methods that are not allowed to be called after dispose was called
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when this resource is disposed.</exception>
        </member>
        <member name="P:CefSharp.DisposableResource.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed. 
            This Value Should be used for lifetime management. 
            i.e. EventHandlers may not be registered if this object is already disposed
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CefSharp.Internals.JavascriptObjectRepository.AnalyseObjectForBinding(CefSharp.Internals.JavascriptObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Analyse the object and generate metadata which will
            be used by the browser subprocess to interact with Cef.
            Method is called recursively
            </summary>
            <param name="obj">Javascript object</param>
            <param name="analyseMethods">Analyse methods for inclusion in metadata model</param>
            <param name="readPropertyValue">When analysis is done on a property, if true then get it's value for transmission over WCF</param>
            <param name="camelCaseJavascriptNames">camel case the javascript names of properties/methods</param>
            <param name="analyseProperties">Analyse properties for binding</param>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.SetValue">
            <summary>
            Gets or sets a delegate which is used to set the property / field value in the managed object.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.GetValue">
            <summary>
            Gets or sets a delegate which is used to get the property / field value from the managed object.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.Id">
            <summary>
            Identifies the <see cref="T:CefSharp.Internals.JavascriptProperty"/> for BrowserProcess to RenderProcess communication
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.ManagedName">
            <summary>
            Gets or sets the name of the managed property.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.JavascriptName">
            <summary>
            Gets or sets the name of the property in the JavaScript runtime.
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.IsComplexType">
            <summary>
            Gets or sets if this property represents a complex type
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.IsReadOnly">
            <summary>
            Gets or sets if this property is read-only
            </summary>
        </member>
        <member name="P:CefSharp.Internals.JavascriptProperty.PropertyValue">
            <summary>
            Gets or sets the property value
            Only primative types can be stored in this property
            </summary>
        </member>
        <member name="M:CefSharp.CefCustomScheme.ParseCommandLineArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Method used internally
            </summary>
            <param name="args">command line arguments</param>
            <returns>list of scheme objects</returns>
        </member>
        <member name="P:CefSharp.CefCustomScheme.SchemeName">
            <summary>
            Schema Name e.g. custom
            </summary>
        </member>
        <member name="P:CefSharp.CefCustomScheme.DomainName">
            <summary>
            Optional Domain Name. An empty value for a standard scheme
            will cause the factory to match all domain names. The |domain_name| value
            will be ignored for non-standard schemes.
            </summary>
        </member>
        <member name="P:CefSharp.CefCustomScheme.IsStandard">
             <summary>
             If true the scheme will be treated as a standard scheme.
             Standard schemes are subject to URL canonicalization and parsing rules as
             defined in the Common Internet Scheme Syntax RFC 1738 Section 3.1 available
             at http://www.ietf.org/rfc/rfc1738.txt
            
             In particular, the syntax for standard scheme URLs must be of the form:
             <pre>
              [scheme]://[username]:[password]@[host]:[port]/[url-path]
             </pre>
             Standard scheme URLs must have a host component that is a fully qualified
             domain name as defined in Section 3.5 of RFC 1034 [13] and Section 2.1 of
             RFC 1123. These URLs will be canonicalized to "scheme://host/path" in the
             simplest case and "scheme://username:password@host:port/path" in the most
             explicit case. For example, "scheme:host/path" and "scheme:///host/path"
             will both be canonicalized to "scheme://host/path". The origin of a
             standard scheme URL is the combination of scheme, host and port (i.e.,
             "scheme://host:port" in the most explicit case).
            
             For non-standard scheme URLs only the "scheme:" component is parsed and
             canonicalized. The remainder of the URL will be passed to the handler
             as-is. For example, "scheme:///some%20text" will remain the same.
             Non-standard scheme URLs cannot be used as a target for form submission.
             </summary>
        </member>
        <member name="P:CefSharp.CefCustomScheme.IsLocal">
            <summary>
            If true the scheme will be treated as local (i.e. with the
            same security rules as those applied to "file" URLs). Normal pages cannot
            link to or access local URLs. Also, by default, local URLs can only perform
            XMLHttpRequest calls to the same URL (origin + path) that originated the
            request. To allow XMLHttpRequest calls from a local URL to other URLs with
            the same origin set the CefSettings.file_access_from_file_urls_allowed
            value to true. To allow XMLHttpRequest calls from a local URL to all
            origins set the CefSettings.universal_access_from_file_urls_allowed value
            to true.
            </summary>
        </member>
        <member name="P:CefSharp.CefCustomScheme.IsDisplayIsolated">
            <summary>
            If true the scheme will be treated as display-isolated.
            This means that pages cannot display these URLs unless they are
            from the same scheme. For example, pages in another origin cannot create
            iframes or hyperlinks to URLs with this scheme.
            </summary>
        </member>
        <member name="T:CefSharp.CefErrorCode">
            <summary>
            Lists some of the error codes that can be reported by CEF.
            
            For a complete up-to-date list, see the CEF source code
            (cef_errorcode_t in include/internal/cef_types.h)
            and the Chromium source code (net/base/net_error_list.h).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.None">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.IoPending">
            <summary>
            An asynchronous IO operation is not yet complete.  This usually does not
            indicate a fatal error.  Typically this error will be generated as a
            notification to wait for some external notification that the IO operation
            finally completed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Failed">
            <summary>
            A generic failure occurred.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Aborted">
            <summary>
            A request was aborted, possibly by the user.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidArgument">
            <summary>
            An argument to the function is incorrect.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidHandle">
            <summary>
            The handle or file descriptor is invalid.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FileNotFound">
            <summary>
            The file or directory cannot be found.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.TimedOut">
            <summary>
            An operation timed out.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FileTooBig">
            <summary>
            The file is too large.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Unexpected">
            <summary>
            An unexpected error. This may be caused by a programming mistake or an invalid assumption
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.AccessDenied">
            <summary>
            Permission to access a resource, other than the network, was denied.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NotImplemented">
            <summary>
            The operation failed because of unimplemented functionality.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InsufficientResources">
            <summary>
            There were not enough resources to complete the operation.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.OutOfMemory">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UploadFileChanged">
            <summary>
            The file upload failed because the file's modification time was different
            from the expectation.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocketNotConnected">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FileExists">
            <summary>
            The file already exists.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FilePathTooLong">
            <summary>
            The path or file name is too long.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FileNoSpace">
            <summary>
            Not enough room left on the disk.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FileVirusInfected">
            <summary>
            The file has a virus.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.BlockedByClient">
            <summary>
            The client chose to block the request.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NetworkChanged">
            <summary>
            The network changed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.BlockedByAdministrator">
            <summary>
            The request was blocked by the URL blacklist configured by the domain
            administrator.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocketIsConnected">
            <summary>
            The socket is already connected.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.BlockedEnrollmentCheckPending">
            <summary>
            The request was blocked because the forced reenrollment check is still
            pending. This error can only occur on ChromeOS.
            The error can be emitted by code in chrome/browser/policy/policy_helpers.cc.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ConnectionClosed">
            <summary>
            A connection was closed (corresponding to a TCP FIN).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ConnectionReset">
            <summary>
            A connection was reset (corresponding to a TCP RST).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ConnectionRefused">
            <summary>
            A connection attempt was refused.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ConnectionAborted">
            <summary>
            A connection timed out as a result of not receiving an ACK for data sent.
            This can include a FIN packet that did not get ACK'd.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ConnectionFailed">
            <summary>
            A connection attempt failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NameNotResolved">
            <summary>
            The host name could not be resolved.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InternetDisconnected">
            <summary>
            The Internet connection has been lost.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslProtocolError">
            <summary>
            An SSL protocol error occurred.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.AddressInvalid">
            <summary>
            The IP address or port number is invalid (e.g., cannot connect to the IP address 0 or the port 0).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.AddressUnreachable">
            <summary>
            The IP address is unreachable.  This usually means that there is no route to the specified host or network.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslClientAuthCertNeeded">
            <summary>
            The server requested a client certificate for SSL client authentication.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.TunnelConnectionFailed">
            <summary>
            A tunnel connection through the proxy could not be established.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NoSslVersionsEnabled">
            <summary>
            No SSL protocol versions are enabled.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslVersionOrCipherMismatch">
            <summary>
            The client and server don't support a common SSL protocol version or cipher suite.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslRenegotiationRequested">
            <summary>
            The server requested a renegotiation (rehandshake).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ProxyAuthUnsupported">
            <summary>
            The proxy requested authentication (for tunnel establishment) with an
            unsupported method.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertErrorInSslRenegotiation">
             <summary>
             During SSL renegotiation (rehandshake), the server sent a certificate with
             an error.
            
             Note: this error is not in the -2xx range so that it won't be handled as a
             certificate error.
             </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.BadSslClientAuthCert">
            <summary>
            The SSL handshake failed because of a bad or missing client certificate.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ConnectionTimedOut">
            <summary>
            A connection attempt timed out.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.HostResolverQueueTooLarge">
            <summary>
            There are too many pending DNS resolves, so a request in the queue was
            aborted.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocksConnectionFailed">
            <summary>
            Failed establishing a connection to the SOCKS proxy server for a target host.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocksConnectionHostUnreachable">
            <summary>
            The SOCKS proxy server failed establishing connection to the target host
            because that host is unreachable.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NpnNegotiationFailed">
            <summary>
            The request to negotiate an alternate protocol failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslNoRenegotiation">
            <summary>
            The peer sent an SSL no_renegotiation alert message.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.WinsockUnexpectedWrittenBytes">
            <summary>
            Winsock sometimes reports more data written than passed.  This is probably
            due to a broken LSP.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslDecompressionFailureAlert">
            <summary>
            An SSL peer sent us a fatal decompression_failure alert. This typically
            occurs when a peer selects DEFLATE compression in the mistaken belief that
            it supports it.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslBadRecordMacAlert">
            <summary>
            An SSL peer sent us a fatal bad_record_mac alert. This has been observed
            from servers with buggy DEFLATE support.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ProxyAuthRequested">
            <summary>
            The proxy requested authentication (for tunnel establishment).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslUnsafeNegotiation">
            <summary>
            A known TLS strict server didn't offer the renegotiation extension.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslWeakServerEphemeralDhKey">
            <summary>
            The SSL server attempted to use a weak ephemeral Diffie-Hellman key.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ProxyConnectionFailed">
            <summary>
            Could not create a connection to the proxy server. An error occurred
            either in resolving its name, or in connecting a socket to it.
            Note that this does NOT include failures during the actual "CONNECT" method
            of an HTTP proxy.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.MandatoryProxyConfigurationFailed">
            <summary>
            A mandatory proxy configuration could not be used. Currently this means
            that a mandatory PAC script could not be fetched, parsed or executed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.PreconnectMaxSocketLimit">
            <summary>
            We've hit the max socket limit for the socket pool while preconnecting.  We
            don't bother trying to preconnect more sockets.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslClientAuthPrivateKeyAccessDenied">
            <summary>
            The permission to use the SSL client certificate's private key was denied.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslClientAuthCertNoPrivateKey">
            <summary>
            The SSL client certificate has no private key.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ProxyCertificateInvalid">
            <summary>
            The certificate presented by the HTTPS Proxy was invalid.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NameResolutionFailed">
            <summary>
            An error occurred when trying to do a name resolution (DNS).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NetworkAccessDenied">
            <summary>
            Permission to access the network was denied. This is used to distinguish
            errors that were most likely caused by a firewall from other access denied
            errors. See also ERR_ACCESS_DENIED.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.TemporarilyThrottled">
            <summary>
            The request throttler module cancelled this request to avoid DDOS.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.HttpsProxyTunnelResponse">
            <summary>
            A request to create an SSL tunnel connection through the HTTPS proxy
            received a non-200 (OK) and non-407 (Proxy Auth) response.  The response
            body might include a description of why the request failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslClientAuthSignatureFailed">
             <summary>
             We were unable to sign the CertificateVerify data of an SSL client auth
             handshake with the client certificate's private key.
            
             Possible causes for this include the user implicitly or explicitly
             denying access to the private key, the private key may not be valid for
             signing, the key may be relying on a cached handle which is no longer
             valid, or the CSP won't allow arbitrary data to be signed.
             </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.MsgTooBig">
            <summary>
            The message was too large for the transport.  (for example a UDP message
            which exceeds size threshold).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdySessionAlreadyExists">
            <summary>
            A SPDY session already exists, and should be used instead of this connection.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.WsProtocolError">
            <summary>
            Websocket protocol error. Indicates that we are terminating the connection
            due to a malformed frame or other protocol violation.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ProtocolSwitched">
            <summary>
            Connection was aborted for switching to another ptotocol.
            WebSocket abort SocketStream connection when alternate protocol is found.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.AddressInUse">
            <summary>
            Returned when attempting to bind an address that is already in use.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslHandshakeNotCompleted">
            <summary>
            An operation failed because the SSL handshake has not completed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslBadPeerPublicKey">
            <summary>
            SSL peer's public key is invalid.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslPinnedKeyNotInCertChain">
            <summary>
            The certificate didn't match the built-in public key pins for the host name.
            The pins are set in net/http/transport_security_state.cc and require that
            one of a set of public keys exist on the path from the leaf to the root.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ClientAuthCertTypeUnsupported">
            <summary>
            Server request for client certificate did not contain any types we support.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.OriginBoundCertGenerationTypeMismatch">
            <summary>
            Server requested one type of cert, then requested a different type while the
            first was still being generated.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslDecryptErrorAlert">
            <summary>
            An SSL peer sent us a fatal decrypt_error alert. This typically occurs when
            a peer could not correctly verify a signature (in CertificateVerify or
            ServerKeyExchange) or validate a Finished message.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.WsThrottleQueueTooLarge">
            <summary>
            There are too many pending WebSocketJob instances, so the new job was not
            pushed to the queue.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.TooManySocketStreams">
            <summary>
            There are too many active SocketStream instances, so the new connect request
            was rejected.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslServerCertChanged">
            <summary>
            The SSL server certificate changed in a renegotiation.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslInappropriateFallback">
            <summary>
            The SSL server indicated that an unnecessary TLS version fallback was
            performed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CtNoSctsVerifiedOk">
            <summary>
            Certificate Transparency: All Signed Certificate Timestamps failed to verify.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslUnrecognizedNameAlert">
            <summary>
            The SSL server sent us a fatal unrecognized_name alert.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocketSetReceiveBufferSizeError">
            <summary>
            Failed to set the socket's receive buffer size as requested.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocketSetSendBufferSizeError">
            <summary>
            Failed to set the socket's send buffer size as requested.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocketReceiveBufferSizeUnchangeable">
            <summary>
            Failed to set the socket's receive buffer size as requested, despite success
            return code from setsockopt.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SocketSendBufferSizeUnchangeable">
            <summary>
            Failed to set the socket's send buffer size as requested, despite success
            return code from setsockopt.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SslClientAuthCertBadFormat">
            <summary>
            Failed to import a client certificate from the platform store into the SSL
            library.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertCommonNameInvalid">
            <summary>
            The server responded with a certificate whose common name did not match the host name.
            This could mean:
            1. An attacker has redirected our traffic to his server and is presenting a certificate
            for which he knows the private key.
            2. The server is misconfigured and responding with the wrong cert.
            3. The user is on a wireless network and is being redirected to the network's login page.
            4. The OS has used a DNS search suffix and the server doesn't have a certificate for the
            abbreviated name in the address bar.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertDateInvalid">
            <summary>
            The server responded with a certificate that, by our clock, appears to either not yet be valid or to have expired.
            This could mean:
            1. An attacker is presenting an old certificate for which he has managed to obtain the private key
            2. The server is misconfigured and is not presenting a valid cert.
            3. Our clock is wrong.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertAuthorityInvalid">
            <summary>
            The server responded with a certificate that is signed by an authority we don't trust.
            The could mean:
            1. An attacker has substituted the real certificate for a cert that
            contains his public key and is signed by his cousin.
            2. The server operator has a legitimate certificate from a CA we don't know about, but should trust.
            3. The server is presenting a self-signed certificate, providing no defense against active attackers (but foiling passive attackers).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertContainsErrors">
            <summary>
            The server responded with a certificate that contains errors. This error is not recoverable.
            MSDN describes this error as follows:
            "The SSL certificate contains errors."
            NOTE: It's unclear how this differs from ERR_CERT_INVALID. For consistency,
            use that code instead of this one from now on.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertNoRevocationMechanism">
            <summary>
            The certificate has no mechanism for determining if it is revoked.  In effect, this certificate cannot be revoked.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertUnableToCheckRevocation">
            <summary>
            Revocation information for the security certificate for this site is not available.
            This could mean:
            1. An attacker has compromised the private key in the certificate and is blocking our attempt to
            find out that the cert was revoked.
            2. The certificate is unrevoked, but the revocation server is busy or unavailable.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertRevoked">
            <summary>
            The server responded with a certificate has been revoked.
            We have the capability to ignore this error, but it is probably not the thing to do.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertInvalid">
            <summary>
            The server responded with a certificate that is invalid. This error is not recoverable.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertWeakSignatureAlgorithm">
            <summary>
            The server responded with a certificate that is signed using a weak
            signature algorithm.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertNonUniqueName">
            <summary>
            The host name specified in the certificate is not unique.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertWeakKey">
            <summary>
            The server responded with a certificate that contains a weak key (e.g.
            a too-small RSA key).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertNameConstraintViolation">
            <summary>
            The certificate claimed DNS names that are in violation of name constraints.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertEnd">
             <summary>
             Add new certificate error codes here.
            
             Update the value of CERT_END whenever you add a new certificate error
             code.
            
             The value immediately past the last certificate error code.
             </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidUrl">
            <summary>
            The URL is invalid.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DisallowedUrlScheme">
            <summary>
            The scheme of the URL is disallowed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnknownUrlScheme">
            <summary>
            The scheme of the URL is unknown.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.TooManyRedirects">
            <summary>
            Attempting to load an URL resulted in too many redirects.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnsafeRedirect">
            <summary>
            Attempting to load an URL resulted in an unsafe redirect (e.g., a redirect to file:// is considered unsafe).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnsafePort">
            <summary>
            Attempting to load an URL with an unsafe port number.  These are port
            numbers that correspond to services, which are not robust to spurious input
            that may be constructed as a result of an allowed web construct (e.g., HTTP
            looks a lot like SMTP, so form submission to port 25 is denied).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidResponse">
            <summary>
            The server's response was invalid.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidChunkedEncoding">
            <summary>
            Error in chunked transfer encoding.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.MethodNotSupported">
            <summary>
            The server did not support the request method.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnexpectedProxyAuth">
            <summary>
            The response was 407 (Proxy Authentication Required), yet we did not send the request to a proxy.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.EmptyResponse">
            <summary>
            The server closed the connection without sending any data.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ResponseHeadersTooBig">
            <summary>
            The headers section of the response is too large.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.PacStatusNotOk">
            <summary>
            The PAC requested by HTTP did not have a valid status code (non-200).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.PacScriptFailed">
            <summary>
            The evaluation of the PAC script failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.RequestRangeNotSatisfiable">
            <summary>
            The response was 416 (Requested range not satisfiable) and the server cannot
            satisfy the range requested.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.MalformedIdentity">
            <summary>
            The identity used for authentication is invalid.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ContentDecodingFailed">
            <summary>
            Content decoding of the response body failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NetworkIoSuspended">
            <summary>
            An operation could not be completed because all network IO
            is suspended.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SynReplyNotReceived">
            <summary>
            FLIP data received without receiving a SYN_REPLY on the stream.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.EncodingConversionFailed">
            <summary>
            Converting the response to target encoding failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnrecognizedFtpDirectoryListingFormat">
            <summary>
            The server sent an FTP directory listing in a format we do not understand.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidSpdyStream">
            <summary>
            Attempted use of an unknown SPDY stream id.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NoSupportedProxies">
            <summary>
            There are no supported proxies in the provided list.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyProtocolError">
            <summary>
            There is a SPDY protocol error.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InvalidAuthCredentials">
            <summary>
            Credentials could not be established during HTTP Authentication.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnsupportedAuthScheme">
            <summary>
            An HTTP Authentication scheme was tried which is not supported on this
            machine.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.EncodingDetectionFailed">
            <summary>
            Detecting the encoding of the response failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.MissingAuthCredentials">
            <summary>
            (GSSAPI) No Kerberos credentials were available during HTTP Authentication.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UnexpectedSecurityLibraryStatus">
            <summary>
            An unexpected, but documented, SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.MisconfiguredAuthEnvironment">
            <summary>
            The environment was not set up correctly for authentication (for
            example, no KDC could be found or the principal is unknown.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.UndocumentedSecurityLibraryStatus">
            <summary>
            An undocumented SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ResponseBodyTooBigToDrain">
            <summary>
            The HTTP response was too big to drain.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ResponseHeadersMultipleContentLength">
            <summary>
            The HTTP response contained multiple distinct Content-Length headers.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.IncompleteSpdyHeaders">
            <summary>
            SPDY Headers have been received, but not all of them - status or version
            headers are missing, so we're expecting additional frames to complete them.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.PacNotInDhcp">
            <summary>
            No PAC URL configuration could be retrieved from DHCP. This can indicate
            either a failure to retrieve the DHCP configuration, or that there was no
            PAC URL configured in DHCP.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ResponseHeadersMultipleContentDisposition">
            <summary>
            The HTTP response contained multiple Content-Disposition headers.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ResponseHeadersMultipleLocation">
            <summary>
            The HTTP response contained multiple Location headers.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyServerRefusedStream">
            <summary>
            SPDY server refused the stream. Client should retry. This should never be a
            user-visible error.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyPingFailed">
            <summary>
            SPDY server didn't respond to the PING message.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ContentLengthMismatch">
            <summary>
            The HTTP response body transferred fewer bytes than were advertised by the
            Content-Length header when the connection is closed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.IncompleteChunkedEncoding">
            <summary>
            The HTTP response body is transferred with Chunked-Encoding, but the
            terminating zero-length chunk was never sent when the connection is closed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.QuicProtocolError">
            <summary>
            There is a QUIC protocol error.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ResponseHeadersTruncated">
            <summary>
            The HTTP headers were truncated by an EOF.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.QuicHandshakeFailed">
            <summary>
            The QUIC crytpo handshake failed.  This means that the server was unable
            to read any requests sent, so they may be resent.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.RequestForSecureResourceOverInsecureQuic">
            <summary>
            An https resource was requested over an insecure QUIC connection.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyInadequateTransportSecurity">
            <summary>
            Transport security is inadequate for the SPDY version.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyFlowControlError">
            <summary>
            The peer violated SPDY flow control.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyFrameSizeError">
            <summary>
            The peer sent an improperly sized SPDY frame.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SpdyCompressionError">
            <summary>
            Decoding or encoding of compressed SPDY headers failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ProxyAuthRequestedWithNoConnection">
            <summary>
            Proxy Auth Requested without a valid Client Socket Handle.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheMiss">
            <summary>
            The cache does not have the requested entry.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheReadFailure">
            <summary>
            Unable to read from the disk cache.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheWriteFailure">
            <summary>
            Unable to write to the disk cache.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheOperationNotSupported">
            <summary>
            The operation is not supported for this entry.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheOpenFailure">
            <summary>
            The disk cache is unable to open this entry.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheCreateFailure">
            <summary>
            The disk cache is unable to create this entry.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheRace">
            <summary>
            Multiple transactions are racing to create disk cache entries. This is an
            internal error returned from the HttpCache to the HttpCacheTransaction that
            tells the transaction to restart the entry-creation logic because the state
            of the cache has changed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheChecksumReadFailure">
            <summary>
            The cache was unable to read a checksum record on an entry. This can be
            returned from attempts to read from the cache. It is an internal error,
            returned by the SimpleCache backend, but not by any URLRequest methods
            or members.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheChecksumMismatch">
            <summary>
            The cache found an entry with an invalid checksum. This can be returned from
            attempts to read from the cache. It is an internal error, returned by the
            SimpleCache backend, but not by any URLRequest methods or members.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CacheLockTimeout">
            <summary>
            Internal error code for the HTTP cache. The cache lock timeout has fired.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.InsecureResponse">
            <summary>
            The server's response was insecure (e.g. there was a cert error).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.NoPrivateKeyForCert">
            <summary>
            The server responded to a &lt;keygen&gt; with a generated client cert that we
            don't have the matching private key for.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.AddUserCertFailed">
            <summary>
            An error adding to the OS certificate database (e.g. OS X Keychain).
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpFailed">
            <summary>
            A generic error for failed FTP control connection command.
            If possible, please use or add a more specific error code.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpServiceUnavailable">
            <summary>
            The server cannot fulfill the request at this point. This is a temporary
            error.
            FTP response code 421.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpTransferAborted">
            <summary>
            The server has aborted the transfer.
            FTP response code 426.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpFileBusy">
            <summary>
            The file is busy, or some other temporary error condition on opening
            the file.
            FTP response code 450.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpSyntaxError">
            <summary>
            Server rejected our command because of syntax errors.
            FTP response codes 500, 501.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpCommandNotSupported">
            <summary>
            Server does not support the command we issued.
            FTP response codes 502, 504.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.FtpBadCommandSequence">
            <summary>
            Server rejected our command because we didn't issue the commands in right
            order.
            FTP response code 503.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Pkcs12ImportBadPassword">
            <summary>
            PKCS #12 import failed due to incorrect password.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Pkcs12ImportFailed">
            <summary>
            PKCS #12 import failed due to other error.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ImportCaCertNotCa">
            <summary>
            CA import failed - not a CA cert.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ImportCertAlreadyExists">
            <summary>
            Import failed - certificate already exists in database.
            Note it's a little weird this is an error but reimporting a PKCS12 is ok
            (no-op).  That's how Mozilla does it, though.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ImportCaCertFailed">
            <summary>
            CA import failed due to some other error.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ImportServerCertFailed">
            <summary>
            Server certificate import failed due to some internal error.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Pkcs12ImportInvalidMac">
            <summary>
            PKCS #12 import failed due to invalid MAC.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Pkcs12ImportInvalidFile">
            <summary>
            PKCS #12 import failed due to invalid/corrupt file.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.Pkcs12ImportUnsupported">
            <summary>
            PKCS #12 import failed due to unsupported features.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.KeyGenerationFailed">
            <summary>
            Key generation failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.OriginBoundCertGenerationFailed">
            <summary>
            Server-bound certificate generation failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.PrivateKeyExportFailed">
            <summary>
            Failure to export private key.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.SelfSignedCertGenerationFailed">
            <summary>
            Self-signed certificate generation failed.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.CertDatabaseChanged">
            <summary>
            The certificate database changed in some way.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.ChannelIdImportFailed">
            <summary>
            Failure to import Channel ID.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsMalformedResponse">
            <summary>
            DNS resolver received a malformed response.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsServerRequiresTcp">
            <summary>
            DNS server requires TCP
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsServerFailed">
            <summary>
            DNS server failed.  This error is returned for all of the following
            error conditions:
            1 - Format error - The name server was unable to interpret the query.
            2 - Server failure - The name server was unable to process this query
                due to a problem with the name server.
            4 - Not Implemented - The name server does not support the requested
                kind of query.
            5 - Refused - The name server refuses to perform the specified
                operation for policy reasons.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsTimedOut">
            <summary>
            DNS transaction timed out.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsCacheMiss">
            <summary>
            The entry was not found in cache, for cache-only lookups.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsSearchEmpty">
            <summary>
            Suffix search list rules prevent resolution of the given host name.
            </summary>
        </member>
        <member name="F:CefSharp.CefErrorCode.DnsSortError">
            <summary>
            Failed to sort addresses according to RFC3484.
            </summary>
        </member>
        <member name="T:CefSharp.ConsoleMessageEventArgs">
            <summary>
            Event arguments to the ConsoleMessage event handler set up in IWebBrowser.
            </summary>
        </member>
        <member name="P:CefSharp.ConsoleMessageEventArgs.Message">
            <summary>
            The message text of the console message.
            </summary>
        </member>
        <member name="P:CefSharp.ConsoleMessageEventArgs.Source">
            <summary>
            The source of the console message.
            </summary>
        </member>
        <member name="P:CefSharp.ConsoleMessageEventArgs.Line">
            <summary>
            The line number that generated the console message.
            </summary>
        </member>
        <member name="T:CefSharp.ICookieVisitor">
            <summary>
            Interface to implement for visiting cookie values. 
            The methods of this class will always be called on the IO thread.
            </summary>
        </member>
        <member name="M:CefSharp.IDownloadHandler.OnBeforeDownload(CefSharp.IBrowser,CefSharp.DownloadItem,CefSharp.IBeforeDownloadCallback)">
            <summary>
            Called before a download begins.
            </summary>
            <param name="browser">The browser instance</param>
            <param name="downloadItem">Represents the file being downloaded.</param>
            <param name="callback">Callback interface used to asynchronously continue a download.</param>
        </member>
        <member name="M:CefSharp.IDownloadHandler.OnDownloadUpdated(CefSharp.IBrowser,CefSharp.DownloadItem,CefSharp.IDownloadItemCallback)">
            <summary>
            Called when a download's status or progress information has been updated. This may be called multiple times before and after <see cref="M:CefSharp.IDownloadHandler.OnBeforeDownload(CefSharp.IBrowser,CefSharp.DownloadItem,CefSharp.IBeforeDownloadCallback)"/>.
            </summary>
            <param name="browser">The browser instance</param>
            <param name="downloadItem">Represents the file being downloaded.</param>
            <param name="callback">The callback used to Cancel/Pause/Resume the process</param>
        </member>
        <member name="M:CefSharp.IJsDialogHandler.OnJSDialog(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String,System.String,CefSharp.CefJsDialogType,System.String,System.String,CefSharp.IJsDialogCallback,System.Boolean@)">
            <summary>
            Called to run a JavaScript dialog.
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
            <param name="originUrl">originating url</param>
            <param name="acceptLang">language</param>
            <param name="dialogType">Dialog Type</param>
            <param name="messageText">Message Text</param>
            <param name="defaultPromptText">value will be specified for prompt dialogs only</param>
            <param name="callback">Callback can be executed inline or in an async fashion</param>
            <param name="suppressMessage">Set suppressMessage to true and return false to suppress the message (suppressing messages is preferable to immediately executing the callback as this is used to detect presumably malicious behavior like spamming alert messages in onbeforeunload). Set suppressMessage to false and return false to use the default implementation (the default implementation will show one modal dialog at a time and suppress any additional dialog requests until the displayed dialog is dismissed).</param>
            <returns>Return true if the application will use a custom dialog or if the callback has been executed immediately. Custom dialogs may be either modal or modeless. If a custom dialog is used the application must execute |callback| once the custom dialog is dismissed.</returns>
        </member>
        <member name="M:CefSharp.IJsDialogHandler.OnJSBeforeUnload(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String,System.Boolean,CefSharp.IJsDialogCallback)">
            <summary>
            When leaving the page a Javascript dialog is displayed asking for user confirmation.
            Returning True allows you to implement a custom dialog or programatically handle.
            To cancel the unload return True and set allowUnload to False.
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
            <param name="message">message (optional)</param>
            <param name="isReload">indicates a page reload</param>
            <param name="callback">Callback can be executed inline or in an async fashion</param>
            <returns>Return false to use the default dialog implementation otherwise return true to handle</returns>
        </member>
        <member name="M:CefSharp.IJsDialogHandler.OnResetDialogState(CefSharp.IWebBrowser,CefSharp.IBrowser)">
            <summary>
            Called to cancel any pending dialogs and reset any saved dialog state. Will
            be called due to events like page navigation irregardless of whether any
            dialogs are currently pending.
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
        </member>
        <member name="M:CefSharp.IJsDialogHandler.OnDialogClosed(CefSharp.IWebBrowser,CefSharp.IBrowser)">
            <summary>
            Called when the default implementation dialog is closed.
            </summary>
            <param name="browserControl">the browser control</param>
            <param name="browser">the browser object</param>
        </member>
        <member name="M:CefSharp.IKeyboardHandler.OnPreKeyEvent(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.KeyType,System.Int32,System.Int32,CefSharp.CefEventFlags,System.Boolean,System.Boolean@)">
            <summary>
            Called before a keyboard event is sent to the renderer. |event| contains
            information about the keyboard event. |os_event| is the operating system
            event message, if any. Return true if the event was handled or false
            otherwise. If the event will be handled in OnKeyEvent() as a keyboard
            shortcut set |isKeyboardShortcut| to true and return false.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this request is for.</param>
            <param name="browser">The browser instance.</param>
            <param name="type">Whether this was a key up/down/raw/etc...</param>
            <param name="windowsKeyCode">
            The Windows key code for the key event. This value is used by the DOM
            specification. Sometimes it comes directly from the event (i.e. on
            Windows) and sometimes it's determined using a mapping function. See
            WebCore/platform/chromium/KeyboardCodes.h for the list of values.
            </param>
            <param name="nativeKeyCode">The native key code. On Windows this appears to be in the format of WM_KEYDOWN/WM_KEYUP/etc... lParam data.</param>
            <param name="modifiers">What other modifier keys are currently down: Shift/Control/Alt/OS X Command/etc...</param>
            <param name="isSystemKey">
            Indicates whether the event is considered a "system key" event (see
            http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
            </param>
            <param name="isKeyboardShortcut">See the summary for an explanation of when to set this to true.</param>
            <returns>Returns true if the event was handled or false otherwise.</returns>
        </member>
        <member name="M:CefSharp.IKeyboardHandler.OnKeyEvent(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.KeyType,System.Int32,System.Int32,CefSharp.CefEventFlags,System.Boolean)">
            <summary>
            Called after the renderer and JavaScript in the page has had a chance to
            handle the event. Return true if the keyboard event was handled or false otherwise.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this request is for.</param>
            <param name="browser">The browser instance.</param>
            <param name="type">Whether this was a key up/down/raw/etc...</param>
            <param name="windowsKeyCode">
            The Windows key code for the key event. This value is used by the DOM
            specification. Sometimes it comes directly from the event (i.e. on
            Windows) and sometimes it's determined using a mapping function. See
            WebCore/platform/chromium/KeyboardCodes.h for the list of values.
            </param>
            <param name="nativeKeyCode">The native key code. On Windows this appears to be in the format of WM_KEYDOWN/WM_KEYUP/etc... lParam data.</param>
            <param name="modifiers">What other modifier keys are currently down: Shift/Control/Alt/OS X Command/etc...</param>
            <param name="isSystemKey">
            Indicates whether the event is considered a "system key" event (see
            http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
            </param>
            <returns>Return true if the keyboard event was handled or false otherwise.</returns>
        </member>
        <member name="M:CefSharp.ILifeSpanHandler.OnBeforePopup(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,System.String,System.String,CefSharp.WindowOpenDisposition,System.Boolean,CefSharp.IPopupFeatures,CefSharp.IWindowInfo,CefSharp.IBrowserSettings,System.Boolean@,CefSharp.IWebBrowser@)">
            <summary>
            Called before a popup window is created.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control this request is for.</param>
            <param name="browser">The browser instance that launched this popup.</param>
            <param name="frame">The HTML frame that launched this popup.</param>
            <param name="targetUrl">The URL of the popup content. (This may be empty/null)</param>
            <param name="targetFrameName">The name of the popup. (This may be empty/null)</param>
            <param name="targetDisposition">The value indicates where the user intended to
            open the popup (e.g. current tab, new tab, etc)</param>
            <param name="userGesture">The value will be true if the popup was opened via explicit user gesture
            (e.g. clicking a link) or false if the popup opened automatically (e.g. via the DomContentLoaded event).</param>
            <param name="popupFeatures"> structure contains additional information about the requested popup window</param>
            <param name="windowInfo">window information</param>
            <param name="browserSettings">browser settings, defaults to source browsers</param>
            <param name="noJavascriptAccess">value indicates whether the new browser window should be scriptable
            and in the same process as the source browser.</param>
            <param name="newBrowser">EXPERIMENTAL - A newly created browser that will host the popup</param>
            <returns>To cancel creation of the popup window return true otherwise return false.</returns>
            <remarks>
            CEF documentation:
            
            Called on the IO thread before a new popup window is created. The |browser|
            and |frame| parameters represent the source of the popup request. The
            |target_url| and |target_frame_name| values may be empty if none were
            specified with the request. The |popupFeatures| structure contains
            information about the requested popup window. To allow creation of the
            popup window optionally modify |windowInfo|, |client|, |settings| and
            |no_javascript_access| and return false. To cancel creation of the popup
            window return true. The |client| and |settings| values will default to the
            source browser's values. The |no_javascript_access| value indicates whether
            the new browser window should be scriptable and in the same process as the
            source browser.
            </remarks>
        </member>
        <member name="M:CefSharp.ILifeSpanHandler.OnAfterCreated(CefSharp.IWebBrowser,CefSharp.IBrowser)">
            <summary>
            Called after a new browser is created.
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control that is realted to the window is closing.</param>
            <param name="browser">The browser instance</param>
        </member>
        <member name="M:CefSharp.ILifeSpanHandler.DoClose(CefSharp.IWebBrowser,CefSharp.IBrowser)">
             <summary>
             Called when a browser has recieved a request to close. This may result
             directly from a call to CefBrowserHost::CloseBrowser() or indirectly if the
             browser is a top-level OS window created by CEF and the user attempts to
             close the window. This method will be called after the JavaScript
             'onunload' event has been fired. It will not be called for browsers after
             the associated OS window has been destroyed (for those browsers it is no
             longer possible to cancel the close).
            
             If CEF created an OS window for the browser returning false will send an OS
             close notification to the browser window's top-level owner (e.g. WM_CLOSE
             on Windows, performClose: on OS-X and "delete_event" on Linux). If no OS
             window exists (window rendering disabled) returning false will cause the
             browser object to be destroyed immediately. Return true if the browser is
             parented to another window and that other window needs to receive close
             notification via some non-standard technique.
            
             If an application provides its own top-level window it should handle OS
             close notifications by calling CefBrowserHost::CloseBrowser(false) instead
             of immediately closing (see the example below). This gives CEF an
             opportunity to process the 'onbeforeunload' event and optionally cancel the
             close before DoClose() is called.
            
             The CefLifeSpanHandler::OnBeforeClose() method will be called immediately
             before the browser object is destroyed. The application should only exit
             after OnBeforeClose() has been called for all existing browsers.
            
             If the browser represents a modal window and a custom modal loop
             implementation was provided in CefLifeSpanHandler::RunModal() this callback
             should be used to restore the opener window to a usable state.
            
             By way of example consider what should happen during window close when the
             browser is parented to an application-provided top-level OS window.
             1.  User clicks the window close button which sends an OS close
                 notification (e.g. WM_CLOSE on Windows, performClose: on OS-X and
                 "delete_event" on Linux).
             2.  Application's top-level window receives the close notification and:
                 A. Calls CefBrowserHost::CloseBrowser(false).
                 B. Cancels the window close.
             3.  JavaScript 'onbeforeunload' handler executes and shows the close
                 confirmation dialog (which can be overridden via
                 CefJSDialogHandler::OnBeforeUnloadDialog()).
             4.  User approves the close.
             5.  JavaScript 'onunload' handler executes.
             6.  Application's DoClose() handler is called. Application will:
                 A. Set a flag to indicate that the next close attempt will be allowed.
                 B. Return false.
             7.  CEF sends an OS close notification.
             8.  Application's top-level window receives the OS close notification and
                 allows the window to close based on the flag from #6B.
             9.  Browser OS window is destroyed.
             10. Application's CefLifeSpanHandler::OnBeforeClose() handler is called and
                 the browser object is destroyed.
             11. Application exits by calling CefQuitMessageLoop() if no other browsers
                 exist.
             </summary>
             <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control that is realted to the window is closing.</param>
             <param name="browser">The browser instance</param>
             <returns>For default behaviour return false</returns>
        </member>
        <member name="M:CefSharp.ILifeSpanHandler.OnBeforeClose(CefSharp.IWebBrowser,CefSharp.IBrowser)">
            <summary>
            Called before a CefBrowser window (either the main browser for <see cref="T:CefSharp.IWebBrowser"/>, 
            or one of its children)
            </summary>
            <param name="browserControl">The <see cref="T:CefSharp.IWebBrowser"/> control that is realted to the window is closing.</param>
            <param name="browser">The browser instance</param>
        </member>
        <member name="M:CefSharp.IContextMenuHandler.OnBeforeContextMenu(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IContextMenuParams,CefSharp.IMenuModel)">
            <summary>
            Called before a context menu is displayed. The model can be cleared to show no context menu or
            modified to show a custom menu.
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame the request is coming from</param>
            <param name="parameters">provides information about the context menu state</param>
            <param name="model">initially contains the default context menu</param>
        </member>
        <member name="M:CefSharp.IContextMenuHandler.OnContextMenuCommand(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IContextMenuParams,CefSharp.CefMenuCommand,CefSharp.CefEventFlags)">
            <summary>
            Called to execute a command selected from the context menu. See
            cef_menu_id_t for the command ids that have default implementations. All
            user-defined command ids should be between MENU_ID_USER_FIRST and
            MENU_ID_USER_LAST.
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame the request is coming from</param>
            <param name="parameters">will have the same values as what was passed to</param>
            <param name="commandId">menu command id</param>
            <param name="eventFlags">event flags</param>
            <returns>Return true if the command was handled or false for the default implementation.</returns>
        </member>
        <member name="M:CefSharp.IContextMenuHandler.OnContextMenuDismissed(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame)">
            <summary>
            Called when the context menu is dismissed irregardless of whether the menu
            was empty or a command was selected.
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame the request is coming from</param>
        </member>
        <member name="M:CefSharp.IContextMenuHandler.RunContextMenu(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IContextMenuParams,CefSharp.IMenuModel,CefSharp.IRunContextMenuCallback)">
            <summary>
            Called to allow custom display of the context menu.
            For custom display return true and execute callback either synchronously or asynchronously with the selected command Id.
            For default display return false. Do not keep references to parameters or model outside of this callback. 
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame the request is coming from</param>
            <param name="parameters">provides information about the context menu state</param>
            <param name="model">contains the context menu model resulting from OnBeforeContextMenu</param>
            <param name="callback">the callback to execute for custom display</param>
            <returns>For custom display return true and execute callback either synchronously or asynchronously with the selected command ID.</returns>
        </member>
        <member name="T:CefSharp.Internals.IWebBrowserInternal">
            <summary>
            Interface implemented by UI control that contains
            a ManagedCefBrowserAdapter instance.
            </summary>
        </member>
        <member name="M:CefSharp.IWebBrowser.Load(System.String)">
            <summary>
            Loads the specified URL.
            </summary>
            <param name="url">The URL to be loaded.</param>
        </member>
        <member name="M:CefSharp.IWebBrowser.RegisterJsObject(System.String,System.Object,System.Boolean)">
            <summary>
            Registers a Javascript object in this specific browser instance.
            </summary>
            <param name="name">The name of the object. (e.g. "foo", if you want the object to be accessible as window.foo).</param>
            <param name="objectToBind">The object to be made accessible to Javascript.</param>
            <param name="camelCaseJavascriptNames">camel case the javascript names of properties/methods, defaults to true</param>
        </member>
        <member name="M:CefSharp.IWebBrowser.RegisterAsyncJsObject(System.String,System.Object,System.Boolean)">
            <summary>
            <para>Asynchronously registers a Javascript object in this specific browser instance.</para>
            <para>Only methods of the object will be availabe.</para>
            </summary>
            <param name="name">The name of the object. (e.g. "foo", if you want the object to be accessible as window.foo).</param>
            <param name="objectToBind">The object to be made accessible to Javascript.</param>
            <param name="camelCaseJavascriptNames">camel case the javascript names of methods, defaults to true</param>
            <remarks>
            The registered methods can only be called in an async way, they will all return immeditaly and the resulting
            object will be a standard javascript Promise object which is usable to wait for completion or failure.
            </remarks>
        </member>
        <member name="M:CefSharp.IWebBrowser.Focus">
            <summary>
            Attempts to give focus to the IWpfWebBrowser control.
            </summary>
            <returns><c>true</c> if keyboard focus and logical focus were set to this element; <c>false</c> if only logical focus
            was set to this element, or if the call to this method did not force the focus to change.</returns>
        </member>
        <member name="M:CefSharp.IWebBrowser.GetBrowser">
            <summary>
            Returns the current CEF Browser Instance
            </summary>
            <returns>browser instance or null</returns>
        </member>
        <member name="E:CefSharp.IWebBrowser.ConsoleMessage">
            <summary>
            Event handler for receiving Javascript console messages being sent from web pages.
            </summary>
        </member>
        <member name="E:CefSharp.IWebBrowser.StatusMessage">
            <summary>
            Event handler for changes to the status message.
            </summary>
        </member>
        <member name="E:CefSharp.IWebBrowser.FrameLoadStart">
            <summary>
            Event handler that will get called when the browser begins loading a frame. Multiple frames may be loading at the same
            time. Sub-frames may start or continue loading after the main frame load has ended. This method may not be called for a
            particular frame if the load request for that frame fails. For notification of overall browser load status use
            OnLoadingStateChange instead.
            This event will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
        </member>
        <member name="E:CefSharp.IWebBrowser.FrameLoadEnd">
            <summary>
            Event handler that will get called when the browser is done loading a frame. Multiple frames may be loading at the same
            time. Sub-frames may start or continue loading after the main frame load has ended. This method will always be called
            for all frames irrespective of whether the request completes successfully.
            This event will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
        </member>
        <member name="E:CefSharp.IWebBrowser.LoadError">
            <summary>
            Event handler that will get called when the resource load for a navigation fails or is canceled.
            This event will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
        </member>
        <member name="E:CefSharp.IWebBrowser.LoadingStateChanged">
            <summary>
            Event handler that will get called when the Loading state has changed.
            This event will be fired twice. Once when loading is initiated either programmatically or
            by user action, and once when loading is terminated due to completion, cancellation of failure. 
            This event will be called on the CEF UI thread.
            Blocking this thread will likely cause your UI to become unresponsive and/or hang.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.DialogHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDialogHandler"/> and assign to handle dialog events.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.RequestHandler">
            <summary>
            Implement <see cref="T:CefSharp.IRequestHandler"/> and assign to handle events related to browser requests.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.DisplayHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDisplayHandler"/> and assign to handle events related to browser display state.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.LoadHandler">
            <summary>
            Implement <see cref="T:CefSharp.ILoadHandler"/> and assign to handle events related to browser load status.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.LifeSpanHandler">
            <summary>
            Implement <see cref="T:CefSharp.ILifeSpanHandler"/> and assign to handle events related to popups.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.KeyboardHandler">
            <summary>
            Implement <see cref="T:CefSharp.IKeyboardHandler"/> and assign to handle events related to key press.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.JsDialogHandler">
            <summary>
            Implement <see cref="T:CefSharp.IJsDialogHandler"/> and assign to handle events related to JavaScript Dialogs.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.DragHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDragHandler"/> and assign to handle events related to dragging.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.DownloadHandler">
            <summary>
            Implement <see cref="T:CefSharp.IDownloadHandler"/> and assign to handle events related to downloading files.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.MenuHandler">
            <summary>
            Implement <see cref="T:CefSharp.IContextMenuHandler"/> and assign to handle events related to the browser context menu
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.FocusHandler">
            <summary>
            Implement <see cref="T:CefSharp.IFocusHandler"/> and assign to handle events related to the browser component's focus
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.ResourceHandlerFactory">
            <summary>
            Implement <see cref="T:CefSharp.IResourceHandlerFactory"/> and control the loading of resources
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.GeolocationHandler">
            <summary>
            Implement <see cref="T:CefSharp.IGeolocationHandler"/> and assign to handle requests for permission to use geolocation.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.RenderProcessMessageHandler">
            <summary>
            Implement <see cref="T:CefSharp.IRenderProcessMessageHandler"/> and assign to handle messages from the render process. 
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.FindHandler">
            <summary>
            Implement <see cref="T:CefSharp.IFindHandler"/> to handle events related to find results.
            </summary>
        </member>
        <member name="P:CefSharp.IWebBrowser.IsBrowserInitialized">
            <summary>
            A flag that indicates whether the WebBrowser is initialized (true) or not (false).
            </summary>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.IWebBrowser.IsLoading">
            <summary>
            A flag that indicates whether the control is currently loading one or more web pages (true) or not (false).
            </summary>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.IWebBrowser.CanGoBack">
            <summary>
            A flag that indicates whether the state of the control current supports the GoBack action (true) or not (false).
            </summary>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.IWebBrowser.CanGoForward">
            <summary>
            A flag that indicates whether the state of the control currently supports the GoForward action (true) or not (false).
            </summary>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.IWebBrowser.Address">
            <summary>
            The address (URL) which the browser control is currently displaying.
            Will automatically be updated as the user navigates to another page (e.g. by clicking on a link).
            </summary>
            <remarks>In the WPF control, this property is implemented as a Dependency Property and fully supports data
            binding.</remarks>
        </member>
        <member name="P:CefSharp.IWebBrowser.TooltipText">
            <summary>
            The text that will be displayed as a ToolTip
            </summary>
        </member>
        <member name="T:CefSharp.UrlRequestStatus">
            <summary>
            Flags that represent CefURLRequest status.
            </summary>
        </member>
        <member name="F:CefSharp.UrlRequestStatus.Unknown">
            <summary>
            Unknown status.
            </summary>
        </member>
        <member name="F:CefSharp.UrlRequestStatus.Success">
            <summary>
            Request succeeded.
            </summary>
        </member>
        <member name="F:CefSharp.UrlRequestStatus.IoPending">
            <summary>
            An IO request is pending, and the caller will be informed when it is completed.
            </summary>
        </member>
        <member name="F:CefSharp.UrlRequestStatus.Canceled">
            <summary>
            Request was canceled programatically.
            </summary>
        </member>
        <member name="F:CefSharp.UrlRequestStatus.Failed">
            <summary>
            Request failed for some reason.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.GetMainFrame(CefSharp.IWebBrowser)">
            <summary>
            Returns the main (top-level) frame for the browser window.
            </summary>
            <returns>Frame</returns>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.GetFocusedFrame(CefSharp.IWebBrowser)">
            <summary>
            Returns the focused frame for the browser window.
            </summary>
            <returns>Frame</returns>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Undo(CefSharp.IWebBrowser)">
            <summary>
            Execute Undo on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Redo(CefSharp.IWebBrowser)">
            <summary>
            Execute Redo on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Cut(CefSharp.IWebBrowser)">
            <summary>
            Execute Cut on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Copy(CefSharp.IWebBrowser)">
            <summary>
            Execute Copy on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Paste(CefSharp.IWebBrowser)">
            <summary>
            Execute Paste on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Delete(CefSharp.IWebBrowser)">
            <summary>
            Execute Delete on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.SelectAll(CefSharp.IWebBrowser)">
            <summary>
            Execute SelectAll on the focused frame
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ViewSource(CefSharp.IWebBrowser)">
            <summary>
            Opens up a new program window (using the default text editor) where the source code of the currently displayed web
            page is shown.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.GetSourceAsync(CefSharp.IWebBrowser)">
            <summary>
            Retrieve the main frame's HTML source using a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/> that when executed returns the frame source as a string</returns>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.GetTextAsync(CefSharp.IWebBrowser)">
            <summary>
            Retrieve the main frame's display text using a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/> that when executed returns the frame display text as a string.</returns>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ExecuteScriptAsync(CefSharp.IWebBrowser,System.String,System.Object[])">
            <summary>
            Execute some Javascript code in the context of this WebBrowser. As the method name implies, the script will be
            executed asynchronously, and the method therefore returns before the script has actually been executed.
            This simple helper extension will encapsulate params in single quotes (unless int, uint, etc)
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="methodName">The javascript method name to execute</param>
            <param name="args">the arguments to be passed as params to the method</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ExecuteScriptAsync(CefSharp.IWebBrowser,System.String)">
            <summary>
            Execute some Javascript code in the context of this WebBrowser. As the method name implies, the script will be
            executed asynchronously, and the method therefore returns before the script has actually been executed.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="script">The Javascript code that should be executed.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.LoadString(CefSharp.IWebBrowser,System.String,System.String)">
            <summary>
            Load the string contents with the specified dummy url. Web security restrictions may not behave as expected. 
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="html">html string to load</param>
            <param name="url">the url should have a standard scheme (for example, http scheme) or behaviors like link clicks</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.LoadHtml(CefSharp.IWebBrowser,System.String,System.String)">
            <summary>
            Registers and loads a <see cref="T:CefSharp.ResourceHandler"/> that represents the HTML content.
            </summary>
            <remarks>
            `Cef` Native `LoadHtml` is unpredictable and only works sometimes, this method wraps
            the provided HTML in a <see cref="T:CefSharp.ResourceHandler"/> and loads the provided url using
            the <see cref="M:CefSharp.IWebBrowser.Load(System.String)"/> method.
            Defaults to using <see cref="P:System.Text.Encoding.UTF8"/> for character encoding 
            The url must start with a valid schema, other uri's such as about:blank are invalid
            A valid example looks like http://test/page
            </remarks>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="html">The HTML content.</param>
            <param name="url">The URL that will be treated as the address of the content.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.LoadHtml(CefSharp.IWebBrowser,System.String,System.String,System.Text.Encoding)">
            <summary>
            Registers and loads a <see cref="T:CefSharp.ResourceHandler"/> that represents the HTML content.
            </summary>
            <remarks>
            `Cef` Native `LoadHtml` is unpredictable and only works sometimes, this method wraps
            the provided HTML in a <see cref="T:CefSharp.ResourceHandler"/> and loads the provided url using
            the <see cref="M:CefSharp.IWebBrowser.Load(System.String)"/> method.
            </remarks>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="html">The HTML content.</param>
            <param name="url">The URL that will be treated as the address of the content.</param>
            <param name="encoding">Character Encoding</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Stop(CefSharp.IWebBrowser)">
            <summary>
            Stops loading the current page.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Back(CefSharp.IWebBrowser)">
            <summary>
            Navigates back, must check <see cref="P:CefSharp.IWebBrowser.CanGoBack"/> before calling this method.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Forward(CefSharp.IWebBrowser)">
            <summary>
            Navigates forward, must check <see cref="P:CefSharp.IWebBrowser.CanGoForward"/> before calling this method.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Reload(CefSharp.IWebBrowser)">
            <summary>
            Reloads the page being displayed. This method will use data from the browser's cache, if available.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Reload(CefSharp.IWebBrowser,System.Boolean)">
            <summary>
            Reloads the page being displayed, optionally ignoring the cache (which means the whole page including all .css, .js
            etc. resources will be re-fetched).
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="ignoreCache"><c>true</c> A reload is performed ignoring browser cache; <c>false</c> A reload is
            performed using files from the browser cache, if available.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.GetZoomLevelAsync(CefSharp.IBrowser)">
            <summary>
            Asynchronously gets the current Zoom Level.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.GetZoomLevelAsync(CefSharp.IWebBrowser)">
            <summary>
            Asynchronously gets the current Zoom Level.
            </summary>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.SetZoomLevel(CefSharp.IBrowser,System.Double)">
            <summary>
            Change the ZoomLevel to the specified value. Can be set to 0.0 to clear the zoom level.
            </summary>
            <remarks>
            If called on the CEF UI thread the change will be applied immediately.
            Otherwise, the change will be applied asynchronously on the CEF UI thread.
            The CEF UI thread is different to the WPF/WinForms UI Thread
            </remarks>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
            <param name="zoomLevel">zoom level</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.SetZoomLevel(CefSharp.IWebBrowser,System.Double)">
            <summary>
            Change the ZoomLevel to the specified value. Can be set to 0.0 to clear the zoom level.
            </summary>
            <remarks>
            If called on the CEF UI thread the change will be applied immediately.
            Otherwise, the change will be applied asynchronously on the CEF UI thread.
            The CEF UI thread is different to the WPF/WinForms UI Thread
            </remarks>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="zoomLevel">zoom level</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Find(CefSharp.IBrowser,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Search for text within the current page.
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
            <param name="identifier">Can be used in can conjunction with searchText to have multiple
            searches running simultaneously.</param>
            <param name="searchText">search text</param>
            <param name="forward">indicates whether to search forward or backward within the page.</param>
            <param name="matchCase">indicates whether the search should be case-sensitive. </param>
            <param name="findNext">indicates whether this is the first request or a follow-up.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Find(CefSharp.IWebBrowser,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Search for text within the current page.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="identifier">Can be used in can conjunction with searchText to have multiple
            searches running simultaneously.</param>
            <param name="searchText">search text</param>
            <param name="forward">indicates whether to search forward or backward within the page.</param>
            <param name="matchCase">indicates whether the search should be case-sensitive. </param>
            <param name="findNext">indicates whether this is the first request or a follow-up.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.StopFinding(CefSharp.IBrowser,System.Boolean)">
            <summary>
            Cancel all searches that are currently going on.
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
            <param name="clearSelection">clear the current search selection</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.StopFinding(CefSharp.IWebBrowser,System.Boolean)">
            <summary>
            Cancel all searches that are currently going on.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="clearSelection">clear the current search selection</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Print(CefSharp.IBrowser)">
            <summary>
            Opens a Print Dialog which if used (can be user cancelled) will print the browser contents.
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.PrintToPdfAsync(CefSharp.IBrowser,System.String,CefSharp.PdfPrintSettings)">
            <summary>
            Asynchronously prints the current browser contents to the PDF file specified.
            The caller is responsible for deleting the file when done.
            </summary>
            <param name="cefBrowser">The <see cref="T:CefSharp.IBrowser"/> object this method extends.</param>
            <param name="path">Output file location.</param>
            <param name="settings">Print Settings.</param>
            <returns>A task that represents the asynchronous print operation.
            The result is true on success or false on failure to generate the Pdf.</returns>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.Print(CefSharp.IWebBrowser)">
            <summary>
            Opens a Print Dialog which if used (can be user cancelled) will print the browser contents.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.PrintToPdfAsync(CefSharp.IWebBrowser,System.String,CefSharp.PdfPrintSettings)">
            <summary>
            Asynchronously prints the current browser contents to the PDF file specified.
            The caller is responsible for deleting the file when done.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="path">Output file location.</param>
            <param name="settings">Print Settings.</param>
            <returns>A task that represents the asynchronous print operation.
            The result is true on success or false on failure to generate the Pdf.</returns>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ShowDevTools(CefSharp.IBrowser)">
            <summary>
            Open developer tools in its own window. 
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ShowDevTools(CefSharp.IWebBrowser)">
            <summary>
            Open developer tools in its own window. 
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.CloseDevTools(CefSharp.IBrowser)">
            <summary>
            Explicitly close the developer tools window if one exists for this browser instance.
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.CloseDevTools(CefSharp.IWebBrowser)">
            <summary>
            Explicitly close the developer tools window if one exists for this browser instance.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ReplaceMisspelling(CefSharp.IBrowser,System.String)">
            <summary>
            If a misspelled word is currently selected in an editable node calling
            this method will replace it with the specified word. 
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
            <param name="word">The new word that will replace the currently selected word.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.ReplaceMisspelling(CefSharp.IWebBrowser,System.String)">
            <summary>
            If a misspelled word is currently selected in an editable node calling
            this method will replace it with the specified word. 
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="word">The new word that will replace the currently selected word.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.AddWordToDictionary(CefSharp.IBrowser,System.String)">
            <summary>
            Add the specified word to the spelling dictionary.
            </summary>
            <param name="cefBrowser">The ChromiumWebBrowser instance this method extends</param>
            <param name="word">The new word that will be added to the dictionary.</param>
        </member>
        <member name="M:CefSharp.WebBrowserExtensions.AddWordToDictionary(CefSharp.IWebBrowser,System.String)">
            <summary>
            Add the specified word to the spelling dictionary.
            </summary>
            <param name="browser">The ChromiumWebBrowser instance this method extends</param>
            <param name="word">The new word that will be added to the dictionary.</param>
        </member>
        <member name="T:CefSharp.WebPluginInfo">
            <summary>
            Information about a specific web plugin.
            </summary>
        </member>
        <member name="P:CefSharp.WebPluginInfo.Name">
            <summary>
            Gets or sets the plugin name (i.e. Flash).
            </summary>
        </member>
        <member name="P:CefSharp.WebPluginInfo.Description">
            <summary>
            Gets or sets tge description of the plugin from the version information.
            </summary>
        </member>
        <member name="P:CefSharp.WebPluginInfo.Path">
            <summary>
            Gets or sets the plugin file path (DLL/bundle/library).
            </summary>
        </member>
        <member name="P:CefSharp.WebPluginInfo.Version">
            <summary>
            Gets or sets the version of the plugin (may be OS-specific).
            </summary>
        </member>
        <member name="M:CefSharp.IRequest.SetReferrer(System.String,CefSharp.ReferrerPolicy)">
            <summary>
            Set the referrer URL and policy. If non-empty the referrer URL must be
            fully qualified with an HTTP or HTTPS scheme component. Any username,
            password or ref component will be removed.
            </summary>
            <param name="referrerUrl">the referrer url</param>
            <param name="policy">referrer policy</param>
        </member>
        <member name="M:CefSharp.IRequest.InitializePostData">
            <summary>
            Initialize a new instance of <see cref="T:CefSharp.IPostData"/>.
            Make sure to check if the <see cref="P:CefSharp.IRequest.PostData"/> is null
            before calling otherwise the existing data will be overridden. 
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.Url">
            <summary>
            Request Url
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.Identifier">
            <summary>
            Returns the globally unique identifier for this request or 0 if not specified.
            Can be used by <see cref="T:CefSharp.IRequestHandler"/> implementations in the browser process to track a
            single request across multiple callbacks.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.Method">
            <summary>
            Request Method GET/POST etc
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.ReferrerUrl">
            <summary>
            Get the referrer URL.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.ResourceType">
            <summary>
            Get the resource type for this request.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.ReferrerPolicy">
            <summary>
            Get the referrer policy.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.Headers">
            <summary>
            Header Collection
            NOTE: This collection is a copy of the underlying type, to make changes, take a reference to the collection,
            make your changes, then reassign the collection. At some point this will be replaced with a proper wrapper.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.PostData">
            <summary>
            Post data
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.TransitionType">
            <summary>
            Get the transition type for this request.
            Applies to requests that represent a main frame or sub-frame navigation.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.IsDisposed">
            <summary>
            Gets a value indicating whether the request has been disposed of.
            </summary>
        </member>
        <member name="P:CefSharp.IRequest.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnBeforeBrowse(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest,System.Boolean)">
            <summary>
            Called before browser navigation.
            If the navigation is allowed <see cref="E:CefSharp.IWebBrowser.FrameLoadStart"/> and <see cref="E:CefSharp.IWebBrowser.FrameLoadEnd"/>
            will be called. If the navigation is canceled <see cref="E:CefSharp.IWebBrowser.LoadError"/> will be called with an ErrorCode
            value of <see cref="F:CefSharp.CefErrorCode.Aborted"/>. 
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame the request is coming from</param>
            <param name="request">the request object - cannot be modified in this callback</param>
            <param name="isRedirect">has the request been redirected</param>
            <returns>Return true to cancel the navigation or false to allow the navigation to proceed.</returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnOpenUrlFromTab(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,System.String,CefSharp.WindowOpenDisposition,System.Boolean)">
            <summary>
            Called on the UI thread before OnBeforeBrowse in certain limited cases
            where navigating a new or different browser might be desirable. This
            includes user-initiated navigation that might open in a special way (e.g.
            links clicked via middle-click or ctrl + left-click) and certain types of
            cross-origin navigation initiated from the renderer process (e.g.
            navigating the top-level frame to/from a file URL).
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame object</param>
            <param name="targetUrl">target url</param>
            <param name="targetDisposition">The value indicates where the user intended to navigate the browser based
            on standard Chromium behaviors (e.g. current tab, new tab, etc). </param>
            <param name="userGesture">The value will be true if the browser navigated via explicit user gesture
            (e.g. clicking a link) or false if it navigated automatically (e.g. via the DomContentLoaded event).</param>
            <returns>Return true to cancel the navigation or false to allow the navigation
            to proceed in the source browser's top-level frame.</returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnCertificateError(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.CefErrorCode,System.String,CefSharp.ISslInfo,CefSharp.IRequestCallback)">
            <summary>
            Called to handle requests for URLs with an invalid SSL certificate.
            Return true and call <see cref="M:CefSharp.IRequestCallback.Continue(System.Boolean)"/> either
            in this method or at a later time to continue or cancel the request.  
            If <see cref="!:CefSettings.IgnoreCertificateErrors"/> is set all invalid certificates
            will be accepted without calling this method.
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="errorCode">the error code for this invalid certificate</param>
            <param name="requestUrl">the url of the request for the invalid certificate</param>
            <param name="sslInfo">ssl certificate information</param>
            <param name="callback">Callback interface used for asynchronous continuation of url requests.
            If empty the error cannot be recovered from and the request will be canceled automatically.</param>
            <returns>Return false to cancel the request immediately. Return true and use <see cref="T:CefSharp.IRequestCallback"/> to
            execute in an async fashion.</returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnPluginCrashed(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String)">
            <summary>
            Called when a plugin has crashed
            </summary>
            <param name="browserControl">the ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="pluginPath">path of the plugin that crashed</param>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnBeforeResourceLoad(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest,CefSharp.IRequestCallback)">
            <summary>
            Called before a resource request is loaded. For async processing return <see cref="F:CefSharp.CefReturnValue.ContinueAsync"/> 
            and execute <see cref="M:CefSharp.IRequestCallback.Continue(System.Boolean)"/> or <see cref="M:CefSharp.IRequestCallback.Cancel"/>
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame object</param>
            <param name="request">the request object - can be modified in this callback.</param>
            <param name="callback">Callback interface used for asynchronous continuation of url requests.</param>
            <returns>To cancel loading of the resource return <see cref="F:CefSharp.CefReturnValue.Cancel"/>
            or <see cref="F:CefSharp.CefReturnValue.Continue"/> to allow the resource to load normally. For async
            return <see cref="F:CefSharp.CefReturnValue.ContinueAsync"/></returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.GetAuthCredentials(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,System.Boolean,System.String,System.Int32,System.String,System.String,CefSharp.IAuthCallback)">
            <summary>
            Called when the browser needs credentials from the user.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame object that needs credentials (This will contain the URL that is being requested.)</param>
            <param name="isProxy">indicates whether the host is a proxy server</param>
            <param name="host">hostname</param>
            <param name="port">port number</param>
            <param name="realm">realm</param>
            <param name="scheme">scheme</param>
            <param name="callback">Callback interface used for asynchronous continuation of authentication requests.</param>
            <returns>Return true to continue the request and call CefAuthCallback::Continue() when the authentication information is available. Return false to cancel the request. </returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnRenderProcessTerminated(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.CefTerminationStatus)">
            <summary>
            Called when the render process terminates unexpectedly.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="status">indicates how the process terminated.</param>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnQuotaRequest(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String,System.Int64,CefSharp.IRequestCallback)">
            <summary>
            Called when JavaScript requests a specific storage quota size via the webkitStorageInfo.requestQuota function.
            For async processing return true and execute <see cref="M:CefSharp.IRequestCallback.Continue(System.Boolean)"/> at a later time to 
            grant or deny the request or <see cref="M:CefSharp.IRequestCallback.Cancel"/> to cancel.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="originUrl">the origin of the page making the request</param>
            <param name="newSize">is the requested quota size in bytes</param>
            <param name="callback">Callback interface used for asynchronous continuation of url requests.</param>
            <returns>Return false to cancel the request immediately. Return true to continue the request
            and call <see cref="M:CefSharp.IRequestCallback.Continue(System.Boolean)"/> either in this method or at a later time to
            grant or deny the request.</returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnResourceRedirect(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest,System.String@)">
            <summary>
            Called on the IO thread when a resource load is redirected. The <see cref="P:CefSharp.IRequest.Url"/>
            parameter will contain the old URL and other request-related information.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame that is being redirected.</param>
            <param name="request">the request object - cannot be modified in this callback</param>
            <param name="newUrl">the new URL and can be changed if desired</param>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnProtocolExecution(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String)">
            <summary>
            Called on the UI thread to handle requests for URLs with an unknown protocol component. 
            SECURITY WARNING: YOU SHOULD USE THIS METHOD TO ENFORCE RESTRICTIONS BASED ON SCHEME, HOST OR OTHER URL ANALYSIS BEFORE ALLOWING OS EXECUTION.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="url">the request url</param>
            <returns>return to true to attempt execution via the registered OS protocol handler, if any. Otherwise return false.</returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnRenderViewReady(CefSharp.IWebBrowser,CefSharp.IBrowser)">
            <summary>
            Called on the CEF UI thread when the render view associated
            with browser is ready to receive/handle IPC messages in the render
            process.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnResourceResponse(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest,CefSharp.IResponse)">
            <summary>
            Called on the CEF IO thread when a resource response is received.
            To allow the resource to load normally return false.
            To redirect or retry the resource modify request (url, headers or post body) and return true.
            The response object cannot be modified in this callback. 
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame that is being redirected.</param>
            <param name="request">the request object</param>
            <param name="response">the response object - cannot be modified in this callback</param>
            <returns>
            To allow the resource to load normally return false.
            To redirect or retry the resource modify request (url, headers or post body) and return true.
            </returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.GetResourceResponseFilter(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest,CefSharp.IResponse)">
            <summary>
            Called on the CEF IO thread to optionally filter resource response content.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame that is being redirected.</param>
            <param name="request">the request object - cannot be modified in this callback</param>
            <param name="response">the response object - cannot be modified in this callback</param>
            <returns>Return an IResponseFilter to intercept this response, otherwise return null</returns>
        </member>
        <member name="M:CefSharp.IRequestHandler.OnResourceLoadComplete(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.IFrame,CefSharp.IRequest,CefSharp.IResponse,CefSharp.UrlRequestStatus,System.Int64)">
            <summary>
            Called on the CEF IO thread when a resource load has completed.
            </summary>
            <param name="browserControl">The ChromiumWebBrowser control</param>
            <param name="browser">the browser object</param>
            <param name="frame">The frame that is being redirected.</param>
            <param name="request">the request object - cannot be modified in this callback</param>
            <param name="response">the response object - cannot be modified in this callback</param>
            <param name="status">indicates the load completion status</param>
            <param name="receivedContentLength">is the number of response bytes actually read.</param>
        </member>
        <member name="T:CefSharp.ISchemeHandlerFactory">
            <summary>
            Class that creates <see cref="T:CefSharp.IResourceHandler"/> instances for handling scheme requests.
            The methods of this class will always be called on the CEF IO thread.
            </summary>
        </member>
        <member name="M:CefSharp.ISchemeHandlerFactory.Create(CefSharp.IBrowser,CefSharp.IFrame,System.String,CefSharp.IRequest)">
            <summary>
            Return a new <see cref="T:CefSharp.IResourceHandler"/> instance to handle the request or an empty
            reference to allow default handling of the request.
            </summary>
            <param name="browser">the browser window that originated the
            request or null if the request did not originate from a browser window
            (for example, if the request came from CefURLRequest).</param>
            <param name="frame">frame that originated the request
            or null if the request did not originate from a browser window
            (for example, if the request came from CefURLRequest).</param>
            <param name="schemeName">the scheme name</param>
            <param name="request">The request. (will not contain cookie data)</param>
            <returns>
            Return a new ISchemeHandler instance to handle the request or an empty
            reference to allow default handling of the request
            </returns>
        </member>
        <member name="T:CefSharp.FrameLoadEndEventArgs">
            <summary>
            Event arguments to the FrameLoadEnd event handler set up in IWebBrowser.
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadEndEventArgs.Browser">
            <summary>
            The browser that contains the frame that finished loading.
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadEndEventArgs.Frame">
            <summary>
            The frame that finished loading.
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadEndEventArgs.Url">
            <summary>
            The URL that was loaded.
            </summary>
        </member>
        <member name="P:CefSharp.FrameLoadEndEventArgs.HttpStatusCode">
            <summary>
            Http Status Code
            </summary>
        </member>
        <member name="F:CefSharp.LogSeverity.Default">
            <summary>
            Default logging (currently Info logging)
            </summary>
        </member>
        <member name="F:CefSharp.LogSeverity.Verbose">
            <summary>
            Verbose logging.
            </summary>
        </member>
        <member name="F:CefSharp.LogSeverity.Info">
            <summary>
            Info logging
            </summary>
        </member>
        <member name="F:CefSharp.LogSeverity.Warning">
            <summary>
            Warning logging
            </summary>
        </member>
        <member name="F:CefSharp.LogSeverity.Error">
            <summary>
            Error logging
            </summary>
        </member>
        <member name="F:CefSharp.LogSeverity.Disable">
            <summary>
            Completely disable logging
            </summary>
        </member>
        <member name="T:CefSharp.StatusMessageEventArgs">
            <summary>
            Event arguments to the StatusMessage event handler set up in IWebBrowser.
            </summary>
        </member>
        <member name="P:CefSharp.StatusMessageEventArgs.Browser">
            <summary>
            The browser object
            </summary>
        </member>
        <member name="P:CefSharp.StatusMessageEventArgs.Value">
            <summary>
            The value of the status message.
            </summary>
        </member>
        <member name="T:CefSharp.TitleChangedEventArgs">
            <summary>
            Event arguments to the TitleChanged event handler.
            </summary>
        </member>
        <member name="T:CefSharp.WindowOpenDisposition">
            <summary>
            The manner in which a link click should be opened.
            </summary>
        </member>
    </members>
</doc>
